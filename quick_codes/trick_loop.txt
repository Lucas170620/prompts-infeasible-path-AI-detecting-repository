 * **Entrada:**
    ```go
    func trickyLoop(n int) {
        i := 0
        sum := 0
        for i < n {
            sum += i
            i++
        }
        if n <= 0 {
            fmt.Println("Loop não executou.")
            if sum != 0 { // Esta condição é possível?
                fmt.Println("Erro: soma não zero sem loop!")
            }
        }
    }
    ```
  * **Saída:**

    digraph trick_loop {
        rankdir=TB;
        node [shape=box];
        edge [color=black];

        start [label="Start", shape=ellipse];
        end [label="End", shape=ellipse];

        // Blocos basicos
        block1 [label="B1\ni := 0\nsum := 0"];
        block2 [label="B2\nif i < n", shape=diamond];
        block3 [label="B3\nsum += i\ni++"];
        block4 [label="B4\nif n <= 0", shape=diamond];
        block5 [label="B5\nfmt.Println(\"Loop nao executou.\")", color="red", fontcolor="red"];
        block6 [label="B6\nif sum != 0", shape=diamond, color="red", fontcolor="red"];
        block7 [label="B7\nfmt.Println(\"Erro: soma nao zero sem loop!\")", color="red", fontcolor="red"];

        // Arestas de controle
        start -> block1;
        block1 -> block2;
        block2 -> block3 [label="True (i < n)"];
        block2 -> block4 [label="False (i >= n)"];
        block3 -> block2;
        block4 -> block5 [label="True (n <= 0)", color="red", fontcolor="red"];
        block4 -> end [label="False (n > 0)"];
        block5 -> block6[color="red", fontcolor="red"];
        block6 -> block7 [label="True (sum = 0)\n[INVIAVEL]", color="red", fontcolor="red"];
        block6 -> end [label="False (sum = 0)", color="red", fontcolor="red"];
        block7 -> end [color="red"];

        // Definicoes (def) e usos (c-use/p-use)
        block1 [xlabel="def: i, sum"];
        block2 [xlabel="p-use: i, n"];
        block3 [xlabel="c-use: i, sum\ndef: i, sum"];
        block4 [xlabel="p-use: n"];
        block6 [xlabel="p-use: sum"];
    }

    **SIM**. Se `n <= 0`, o loop não executa, logo `sum` permanece `0`. É impossível a condição `sum != 0` ser verdadeira nesse cenário (Dependência de Dados).