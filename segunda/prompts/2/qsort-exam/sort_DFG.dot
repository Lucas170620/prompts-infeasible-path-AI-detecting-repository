digraph sort_DFG {
    node [shape=ellipse, style=filled, fillcolor=lightblue];
    n [label="n"];
    arr [label="arr"];
    istack [label="istack"];

    node [shape=box, style="", fillcolor=""];
    op_assign_ir [label="ir = n"];
    op_assign_l [label="l = 1"];
    op_assign_jstack [label="jstack = 0"];
    op_assign_flag [label="flag = 0"];
    op_compare_ir_l [label="ir - l < M"];
    op_assign_j [label="j = l + 1"];
    op_compare_j_ir [label="j <= ir"];
    op_assign_a [label="a = arr[j]"];
    op_assign_i [label="i = j - 1"];
    op_compare_i_l [label="i >= l"];
    op_compare_arr_i_a [label="arr[i] <= a"];
    op_assign_arr_i1 [label="arr[i + 1] = arr[i]"];
    op_decrement_i [label="i--"];
    op_assign_arr_i1_a [label="arr[i + 1] = a"];
    op_increment_j [label="j++"];
    op_compare_jstack_0 [label="jstack == 0"];
    op_assign_ir_pop [label="ir = istack[jstack--]"];
    op_assign_l_pop [label="l = istack[jstack--]"];
    op_assign_k [label="k = (l + ir) >> 1"];
    op_swap1 [label="SWAP(arr[k], arr[l + 1])"];
    op_compare_arr_l_ir [label="arr[l] > arr[ir]"];
    op_swap2 [label="SWAP(arr[l], arr[ir])"];
    op_compare_arr_l1_ir [label="arr[l + 1] > arr[ir]"];
    op_swap3 [label="SWAP(arr[l + 1], arr[ir])"];
    op_compare_arr_l_l1 [label="arr[l] > arr[l + 1]"];
    op_swap4 [label="SWAP(arr[l], arr[l + 1])"];
    op_assign_i2 [label="i = l + 1"];
    op_assign_j2 [label="j = ir"];
    op_assign_a2 [label="a = arr[l + 1]"];
    op_increment_i [label="i++"];
    op_compare_arr_i_a2 [label="arr[i] < a"];
    op_decrement_j [label="j--"];
    op_compare_arr_j_a2 [label="arr[j] > a"];
    op_compare_j_i [label="j < i"];
    op_swap5 [label="SWAP(arr[i], arr[j])"];
    op_assign_arr_l1_j [label="arr[l + 1] = arr[j]"];
    op_assign_arr_j_a2 [label="arr[j] = a"];
    op_increment_jstack [label="jstack += 2"];
    op_compare_size [label="ir - i + 1 >= j - l"];
    op_assign_istack1 [label="istack[jstack] = ir"];
    op_assign_istack2 [label="istack[jstack - 1] = i"];
    op_assign_ir_new [label="ir = j - 1"];
    op_assign_istack3 [label="istack[jstack] = j - 1"];
    op_assign_istack4 [label="istack[jstack - 1] = l"];
    op_assign_l_new [label="l = i"];

    node [shape=ellipse, style=filled, fillcolor=lightgreen];
    ir_out [label="ir"];
    l_out [label="l"];
    jstack_out [label="jstack"];
    arr_out [label="arr"];
    istack_out [label="istack"];

    // Data flow edges
    n -> op_assign_ir;
    op_assign_ir -> ir_out;
    op_assign_l -> l_out;
    op_assign_jstack -> jstack_out;
    ir_out -> op_compare_ir_l;
    l_out -> op_compare_ir_l;
    l_out -> op_assign_j;
    op_assign_j -> op_compare_j_ir;
    ir_out -> op_compare_j_ir;
    arr -> op_assign_a;
    op_assign_j -> op_assign_a;
    op_assign_a -> op_compare_arr_i_a;
    op_assign_j -> op_assign_i;
    l_out -> op_compare_i_l;
    op_assign_i -> op_compare_i_l;
    arr -> op_compare_arr_i_a;
    op_compare_arr_i_a -> op_assign_arr_i1 [label="false"];
    op_assign_arr_i1 -> arr_out;
    op_assign_arr_i1 -> op_decrement_i;
    op_decrement_i -> op_compare_i_l;
    op_compare_arr_i_a -> op_assign_arr_i1_a [label="true"];
    op_assign_arr_i1_a -> arr_out;
    op_assign_arr_i1_a -> op_increment_j;
    op_increment_j -> op_compare_j_ir;
    jstack_out -> op_compare_jstack_0;
    op_compare_jstack_0 -> op_assign_ir_pop [label="false"];
    istack -> op_assign_ir_pop;
    op_assign_ir_pop -> ir_out;
    op_assign_ir_pop -> op_assign_l_pop;
    istack -> op_assign_l_pop;
    op_assign_l_pop -> l_out;
    ir_out -> op_assign_k;
    l_out -> op_assign_k;
    op_assign_k -> op_swap1;
    arr -> op_swap1;
    op_swap1 -> arr_out;
    arr_out -> op_compare_arr_l_ir;
    op_compare_arr_l_ir -> op_swap2 [label="true"];
    arr_out -> op_swap2;
    op_swap2 -> arr_out;
    op_compare_arr_l_ir -> op_compare_arr_l1_ir [label="false"];
    arr_out -> op_compare_arr_l1_ir;
    op_compare_arr_l1_ir -> op_swap3 [label="true"];
    arr_out -> op_swap3;
    op_swap3 -> arr_out;
    op_compare_arr_l1_ir -> op_compare_arr_l_l1 [label="false"];
    arr_out -> op_compare_arr_l_l1;
    op_compare_arr_l_l1 -> op_swap4 [label="true"];
    arr_out -> op_swap4;
    op_swap4 -> arr_out;
    op_compare_arr_l_l1 -> op_assign_i2 [label="false"];
    l_out -> op_assign_i2;
    op_assign_i2 -> op_increment_i;
    ir_out -> op_assign_j2;
    op_assign_j2 -> op_decrement_j;
    arr_out -> op_assign_a2;
    op_assign_a2 -> op_compare_arr_i_a2;
    op_increment_i -> op_compare_arr_i_a2;
    op_compare_arr_i_a2 -> op_increment_i [label="true"];
    op_compare_arr_i_a2 -> op_decrement_j [label="false"];
    op_decrement_j -> op_compare_arr_j_a2;
    arr_out -> op_compare_arr_j_a2;
    op_compare_arr_j_a2 -> op_decrement_j [label="true"];
    op_compare_arr_j_a2 -> op_compare_j_i [label="false"];
    op_compare_j_i -> op_swap5 [label="false"];
    arr_out -> op_swap5;
    op_swap5 -> arr_out;
    op_compare_j_i -> op_assign_arr_l1_j [label="true"];
    arr_out -> op_assign_arr_l1_j;
    op_assign_arr_l1_j -> arr_out;
    op_assign_arr_l1_j -> op_assign_arr_j_a2;
    op_assign_a2 -> op_assign_arr_j_a2;
    op_assign_arr_j_a2 -> arr_out;
    op_assign_arr_j_a2 -> op_increment_jstack;
    jstack_out -> op_increment_jstack;
    op_increment_jstack -> jstack_out;
    ir_out -> op_compare_size;
    op_increment_i -> op_compare_size;
    op_decrement_j -> op_compare_size;
    l_out -> op_compare_size;
    op_compare_size -> op_assign_istack1 [label="true"];
    jstack_out -> op_assign_istack1;
    op_assign_istack1 -> istack_out;
    op_assign_istack1 -> op_assign_istack2;
    jstack_out -> op_assign_istack2;
    op_assign_istack2 -> istack_out;
    op_assign_istack2 -> op_assign_ir_new;
    op_decrement_j -> op_assign_ir_new;
    op_assign_ir_new -> ir_out;
    op_compare_size -> op_assign_istack3 [label="false"];
    jstack_out -> op_assign_istack3;
    op_assign_istack3 -> istack_out;
    op_assign_istack3 -> op_assign_istack4;
    jstack_out -> op_assign_istack4;
    op_assign_istack4 -> istack_out;
    op_assign_istack4 -> op_assign_l_new;
    op_increment_i -> op_assign_l_new;
    op_assign_l_new -> l_out;
}