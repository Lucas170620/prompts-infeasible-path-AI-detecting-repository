digraph CFG {
    node [shape=box, style=rounded, fontname="Helvetica"];
    edge [fontname="Helvetica"];

    // Main function
    Main_Start [label="Main: Start\nInitSeed();"];
    Main_Call_Test [label="Call Test(Array);"];
    Main_Return [label="return 1;"];

    // Test function
    Test_Start [label="Test: Start\nInitialize(Array);"];
    Test_Assign_StartTime [label="StartTime = 1000.0;"];
    Test_Call_Sum [label="Call Sum(Array);"];
    Test_Assign_StopTime [label="StopTime = 1500.0;"];
    Test_Compute_TotalTime [label="TotalTime = (StopTime - StartTime)/1000.0;"];
    Test_Return [label="return 0;"];

    // Initialize function
    Init_Start [label="Initialize: Start\nOuterIndex=0;"];
    Init_OuterLoop [label="OuterIndex < MAXSIZE?"];
    Init_InnerLoop [label="InnerIndex=0;"];
    Init_InnerCondition [label="InnerIndex < MAXSIZE?"];
    Init_Assign [label="Array[OuterIndex][InnerIndex] = RandomInteger();"];
    Init_InnerIncrement [label="InnerIndex++;"];
    Init_OuterIncrement [label="OuterIndex++;"];
    Init_Return [label="return 0;"];

    // Sum function
    Sum_Start [label="Sum: Start\nPtotal=0; Ntotal=0; Pcnt=0; Ncnt=0; Outer=0;"];
    Sum_OuterLoop [label="Outer < MAXSIZE?"];
    Sum_InnerLoop [label="Inner=0;"];
    Sum_InnerCondition [label="Inner < MAXSIZE?"];
    Sum_CheckValue [label="Array[Outer][Inner] < 0?"];
    Sum_PositiveCase [label="Ptotal += Array[Outer][Inner];\nPcnt++;"];
    Sum_NegativeCase [label="Ntotal += Array[Outer][Inner];\nNcnt++;"];
    Sum_InnerIncrement [label="Inner++;"];
    Sum_OuterIncrement [label="Outer++;"];
    Sum_Assign [label="Postotal=Ptotal;\nPoscnt=Pcnt;\nNegtotal=Ntotal;\nNegcnt=Ncnt;"];

    // RandomInteger function
    Rand_Start [label="RandomInteger: Start"];
    Rand_Compute [label="Seed = ((Seed*133)+81)%8095;"];
    Rand_Return [label="return Seed;"];

    // Edges for Main
    Main_Start -> Main_Call_Test;
    Main_Call_Test -> Main_Return;

    // Edges for Test
    Test_Start -> Test_Assign_StartTime;
    Test_Assign_StartTime -> Test_Call_Sum;
    Test_Call_Sum -> Test_Assign_StopTime;
    Test_Assign_StopTime -> Test_Compute_TotalTime;
    Test_Compute_TotalTime -> Test_Return;

    // Edges for Initialize
    Init_Start -> Init_OuterLoop;
    Init_OuterLoop -> Init_InnerLoop [label="true"];
    Init_OuterLoop -> Init_Return [label="false"];
    Init_InnerLoop -> Init_InnerCondition;
    Init_InnerCondition -> Init_Assign [label="true"];
    Init_InnerCondition -> Init_OuterIncrement [label="false"];
    Init_Assign -> Init_InnerIncrement;
    Init_InnerIncrement -> Init_InnerCondition;
    Init_OuterIncrement -> Init_OuterLoop;

    // Edges for Sum
    Sum_Start -> Sum_OuterLoop;
    Sum_OuterLoop -> Sum_InnerLoop [label="true"];
    Sum_OuterLoop -> Sum_Assign [label="false"];
    Sum_InnerLoop -> Sum_InnerCondition;
    Sum_InnerCondition -> Sum_CheckValue [label="true"];
    Sum_InnerCondition -> Sum_OuterIncrement [label="false"];
    Sum_CheckValue -> Sum_PositiveCase [label="true"];
    Sum_CheckValue -> Sum_NegativeCase [label="false"];
    Sum_PositiveCase -> Sum_InnerIncrement;
    Sum_NegativeCase -> Sum_InnerIncrement;
    Sum_InnerIncrement -> Sum_InnerCondition;
    Sum_OuterIncrement -> Sum_OuterLoop;

    // Edges for RandomInteger
    Rand_Start -> Rand_Compute;
    Rand_Compute -> Rand_Return;

    // Function call edges
    Main_Call_Test -> Test_Start [style=dashed, color=blue];
    Test_Call_Sum -> Sum_Start [style=dashed, color=blue];
    Init_Assign -> Rand_Start [style=dashed, color=green];
}