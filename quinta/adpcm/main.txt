```dot
digraph main {
    rankdir=TB;
    node [shape=box, fontname=Arial];
    edge [fontname=Arial];

    start [label="Start", shape=ellipse];
    end [label="End", shape=ellipse];
    
    // Blocos principais
    decl [label="Declare i,j,f,test_data[6],compressed[3],result[6]"];
    reset_call [label="reset()"];
    init_jf [label="j=10, f=2000"];
    loop1_init [label="i=0"];
    loop1_cond [label="i < SIZE (3)", shape=diamond];
    loop1_body [label="test_data[i] = j * my_cos(f*PI*i)"];
    loop1_inc [label="i++"];
    loop2_init [label="i=0"];
    loop2_cond [label="i < IN_END (4)", shape=diamond];
    loop2_body [label="compressed[i/2] = encode(test_data[i], test_data[i+1])"];
    loop2_inc [label="i += 2"];
    loop3_init [label="i=0"];
    loop3_cond [label="i < IN_END (4)", shape=diamond];
    loop3_body [label="decode(compressed[i/2])\nresult[i]=xout1\nresult[i+1]=xout2"];
    loop3_inc [label="i += 2"];
    return_stmt [label="return result[4] + result[5]"];

    // Fluxo normal
    start -> decl;
    decl -> reset_call;
    reset_call -> init_jf;
    init_jf -> loop1_init;
    loop1_init -> loop1_cond;
    loop1_cond -> loop1_body [label="True"];
    loop1_body -> loop1_inc;
    loop1_inc -> loop1_cond;
    loop1_cond -> loop2_init [label="False"];
    loop2_init -> loop2_cond;
    loop2_cond -> loop2_body [label="True"];
    loop2_body -> loop2_inc;
    loop2_inc -> loop2_cond;
    loop2_cond -> loop3_init [label="False"];
    loop3_init -> loop3_cond;
    loop3_cond -> loop3_body [label="True"];
    loop3_body -> loop3_inc;
    loop3_inc -> loop3_cond;
    loop3_cond -> return_stmt [label="False"];
    return_stmt -> end;

    // Infeasible paths: Não há condições contraditórias ou invariantes que tornem caminhos inviáveis
    // Todos os caminhos são viáveis dado que SIZE=3 e IN_END=4 são compatíveis
    // e os loops seguem limites válidos
}
```