digraph CFG {
    node [shape=box, style=rounded, fontname="Helvetica"];
    edge [fontname="Helvetica"];

    // Nos principais
    N1 [label="Main: sort(20);"];
    N2 [label="sort: Inicializacao\ni, ir=n, j, k, l=1\njstack=0, flag=0"];
    N3 [label="Loop externo: for (;;)"];
    N4 [label="if (ir - l < M)"];
    N5 [label="Insertion Sort: j = l+1"];
    N6 [label="Loop externo (Insertion): j <= ir"];
    N7 [label="a = arr[j]; i = j-1"];
    N8 [label="Loop interno: i >= l"];
    N9 [label="if (arr[i] <= a)"];
    N10 [label="arr[i+1] = arr[i]; i--"];
    N11 [label="arr[i+1] = a; j++"];
    N12 [label="if (jstack == 0)"];
    N13 [label="break; (fim do loop externo)"];
    N14 [label="Pop da pilha: ir=istack[jstack--]; l=istack[jstack--]"];
    N15 [label="Quicksort: k = (l+ir)>>1; SWAPs; i=l+1; j=ir; a=arr[l+1]"];
    N16 [label="Loop de particao: for (;;)"];
    N17 [label="i++; while (arr[i] < a) i++"];
    N18 [label="j--; while (arr[j] > a) j--"];
    N19 [label="if (j < i)"];
    N20 [label="SWAP(arr[i], arr[j])"];
    N21 [label="arr[l+1]=arr[j]; arr[j]=a; jstack+=2"];
    N22 [label="if (ir-i+1 >= j-l)"];
    N23 [label="Push direita: istack[jstack]=ir; istack[jstack-1]=i; ir=j-1"];
    N24 [label="Push esquerda: istack[jstack]=j-1; istack[jstack-1]=l; l=i"];
    N25 [label="Fim da funcao sort"];

    // Arestas do CFG
    N1 -> N2;
    N2 -> N3;
    N3 -> N4;
    N4 -> N5 [label="true"];
    N4 -> N15 [label="false"];
    N5 -> N6;
    N6 -> N7 [label="true"];
    N6 -> N12 [label="false"];
    N7 -> N8;
    N8 -> N9 [label="true"];
    N8 -> N11 [label="false"];
    N9 -> N11 [label="true (break)"];
    N9 -> N10 [label="false"];
    N10 -> N8;
    N11 -> N6;
    N12 -> N13 [label="true"];
    N12 -> N14 [label="false"];
    N13 -> N25;
    N14 -> N3;
    N15 -> N16;
    N16 -> N17;
    N17 -> N18;
    N18 -> N19;
    N19 -> N21 [label="true (break)"];
    N19 -> N20 [label="false"];
    N20 -> N16;
    N21 -> N22;
    N22 -> N23 [label="true"];
    N22 -> N24 [label="false"];
    N23 -> N3;
    N24 -> N3;
}