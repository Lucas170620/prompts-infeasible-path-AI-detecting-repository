digraph sort_CFG {
    node [shape=box, style=rounded, fontname="Helvetica"];
    edge [fontname="Helvetica"];

    // Node definitions
    N1 [label="1: unsigned long i, ir = n, j, k, l = 1;\nint jstack = 0;\nint flag;\nfloat a, temp;\nflag = 0;"];
    N2 [label="2: for (;;)"];
    N3 [label="3: if (ir - l < M)"];
    N4 [label="4: for (j = l + 1; j <= ir; j++)"];
    N5 [label="5: a = arr[j];\nfor (i = j - 1; i >= l; i--)"];
    N6 [label="6: if (arr[i] <= a)"];
    N7 [label="7: break;"];
    N8 [label="8: arr[i + 1] = arr[i];"];
    N9 [label="9: arr[i + 1] = a;"];
    N10 [label="10: if (jstack == 0)"];
    N11 [label="11: break;"];
    N12 [label="12: ir = istack[jstack--];\nl = istack[jstack--];"];
    N13 [label="13: k = (l + ir) >> 1;\nSWAP(arr[k], arr[l + 1]);"];
    N14 [label="14: if (arr[l] > arr[ir])"];
    N15 [label="15: SWAP(arr[l], arr[ir]);"];
    N16 [label="16: if (arr[l + 1] > arr[ir])"];
    N17 [label="17: SWAP(arr[l + 1], arr[ir]);"];
    N18 [label="18: if (arr[l] > arr[l + 1])"];
    N19 [label="19: SWAP(arr[l], arr[l + 1]);"];
    N20 [label="20: i = l + 1;\nj = ir;\na = arr[l + 1];"];
    N21 [label="21: for (;;)"];
    N22 [label="22: i++;\nwhile (arr[i] < a) i++;"];
    N23 [label="23: j--;\nwhile (arr[j] > a) j--;"];
    N24 [label="24: if (j < i)"];
    N25 [label="25: break;"];
    N26 [label="26: SWAP(arr[i], arr[j]);"];
    N27 [label="27: arr[l + 1] = arr[j];\narr[j] = a;\njstack += 2;"];
    N28 [label="28: if (ir - i + 1 >= j - l)"];
    N29 [label="29: istack[jstack] = ir;\nistack[jstack - 1] = i;\nir = j - 1;"];
    N30 [label="30: istack[jstack] = j - 1;\nistack[jstack - 1] = l;\nl = i;"];
    N31 [label="31: return;"];

    // Edge definitions
    N1 -> N2;
    N2 -> N3;
    N3 -> N4 [label="true"];
    N3 -> N13 [label="false"];
    N4 -> N5 [label="j <= ir"];
    N4 -> N10 [label="j > ir"];
    N5 -> N6 [label="i >= l"];
    N5 -> N9 [label="i < l"];
    N6 -> N7 [label="true"];
    N6 -> N8 [label="false"];
    N7 -> N9;
    N8 -> N5;
    N9 -> N4;
    N10 -> N11 [label="true"];
    N10 -> N12 [label="false"];
    N11 -> N31;
    N12 -> N2;
    N13 -> N14;
    N14 -> N15 [label="true"];
    N14 -> N16 [label="false"];
    N15 -> N16;
    N16 -> N17 [label="true"];
    N16 -> N18 [label="false"];
    N17 -> N18;
    N18 -> N19 [label="true"];
    N18 -> N20 [label="false"];
    N19 -> N20;
    N20 -> N21;
    N21 -> N22;
    N22 -> N23;
    N23 -> N24;
    N24 -> N25 [label="true"];
    N24 -> N26 [label="false"];
    N25 -> N27;
    N26 -> N21;
    N27 -> N28;
    N28 -> N29 [label="true"];
    N28 -> N30 [label="false"];
    N29 -> N2;
    N30 -> N2;
}