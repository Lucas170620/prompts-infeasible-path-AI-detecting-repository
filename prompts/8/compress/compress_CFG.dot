digraph compress_CFG {
    node [shape=box, style=rounded, fontname="Helvetica"];
    edge [fontname="Helvetica"];

    // Nos principais
    N1 [label="compress(): Inicializacao"];
    N2 [label="compress(): while (InCnt > 0)"];
    N3 [label="compress(): c = getbyte(); in_count++; fcode = ...; i = ...;"];
    N4 [label="compress(): if (htabof(i) == fcode)"];
    N5 [label="compress(): ent = codetabof(i); continue;"];
    N6 [label="compress(): else if (htabof(i) < 0)"];
    N7 [label="compress(): goto nomatch;"];
    N8 [label="compress(): disp = hsize_reg - i; if (i==0) disp=1;"];
    N9 [label="compress(): Probe: i -= disp; if (i<0) i+=hsize_reg;"];
    N10 [label="compress(): if (htabof(i) == fcode)"];
    N11 [label="compress(): ent = codetabof(i); continue;"];
    N12 [label="compress(): if (htabof(i)>0 && (++apsim_bound111 < in_count))"];
    N13 [label="compress(): goto Probe;"];
    N14 [label="compress(): nomatch: out_count++; ent = c;"];
    N15 [label="compress(): if (free_ent < maxmaxcode)"];
    N16 [label="compress(): codetabof(i)=free_ent++; htabof(i)=fcode;"];
    N17 [label="compress(): else if (in_count>=checkpoint && block_compress)"];
    N18 [label="compress(): cl_block();"];
    N19 [label="compress(): Fim do while"];
    N20 [label="compress(): if (bytes_out > in_count) exit_stat=2;"];
    N21 [label="cl_block(): checkpoint = in_count + CHECK_GAP; if (in_count > ...)"];
    N22 [label="cl_block(): ratio = rat; else ratio=0; cl_hash(); free_ent=FIRST; clear_flg=1; output(CLEAR);"];
    N23 [label="cl_hash(): Reset code table"];
    N24 [label="output(): Manipulacao de bits e escrita"];

    // Arestas
    N1 -> N2;
    N2 -> N3 [label="InCnt>0"];
    N2 -> N20 [label="InCnt<=0"];
    N3 -> N4;
    N4 -> N5 [label="true"];
    N4 -> N6 [label="false"];
    N5 -> N2;
    N6 -> N7 [label="true"];
    N6 -> N8 [label="false"];
    N7 -> N14;
    N8 -> N9;
    N9 -> N10;
    N10 -> N11 [label="true"];
    N10 -> N12 [label="false"];
    N11 -> N2;
    N12 -> N13 [label="true"];
    N12 -> N14 [label="false"];
    N13 -> N9;
    N14 -> N15;
    N15 -> N16 [label="true"];
    N15 -> N17 [label="false"];
    N16 -> N19;
    N17 -> N18 [label="true"];
    N17 -> N19 [label="false"];
    N18 -> N19;
    N19 -> N2;
    N20 -> N21 [label="cl_block condicional"];
    N21 -> N22;
    N22 -> N23 [label="cl_hash chamado"];
    N22 -> N24 [label="output(CLEAR)"];
}