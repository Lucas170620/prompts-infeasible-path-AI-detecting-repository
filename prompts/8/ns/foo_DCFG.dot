digraph foo_DCFG {
    rankdir=TB;
    node [shape=box];
    
    // Nos principais
    entry [label="ENTRY\nfoo(int x)"];
    init [label="i=0, j=0, k=0, l=0\n#ifdef TEST: c=0"];
    cond_i [label="i < 5?"];
    cond_j [label="j < 5?"];
    cond_k [label="k < 5?"];
    cond_l [label="l < 5?"];
    inner [label="INNER LOOP\n#ifdef TEST: c++\nif(keys[i][j][k][l] == x)"];
    return_found [label="RETURN FOUND\nreturn answer[i][j][k][l] + keys[i][j][k][l]"];
    inc_l [label="l++"];
    inc_k [label="k++"];
    inc_j [label="j++"];
    inc_i [label="i++"];
    return_not_found [label="RETURN NOT FOUND\nreturn -1"];
    exit [label="EXIT"];
    
    // Arestas de controle
    entry -> init;
    init -> cond_i;
    cond_i -> cond_j [label="true"];
    cond_i -> return_not_found [label="false"];
    cond_j -> cond_k [label="true"];
    cond_j -> inc_i [label="false"];
    cond_k -> cond_l [label="true"];
    cond_k -> inc_j [label="false"];
    cond_l -> inner [label="true"];
    cond_l -> inc_k [label="false"];
    inner -> return_found [label="true"];
    inner -> inc_l [label="false"];
    inc_l -> cond_l;
    inc_k -> cond_k;
    inc_j -> cond_j;
    inc_i -> cond_i;
    return_found -> exit;
    return_not_found -> exit;
    
    // Arestas de dados (def-use)
    inner -> return_found [label="c-use: x, i, j, k, l\np-use: keys[i][j][k][l]", style=dashed, color=blue];
    
    // Caminho inviavel marcado em vermelho
    inner -> return_found [color=red, penwidth=2.0];
}