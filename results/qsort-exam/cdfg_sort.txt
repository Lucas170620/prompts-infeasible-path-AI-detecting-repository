```dot
digraph sort {
    rankdir=TB;
    node [shape=box, fontname=Arial];
    edge [fontname=Arial];

    start [label="Start\nn = 20", shape=ellipse];
    end [label="End", shape=ellipse];
    init [label="i,ir=n,j,k,l=1\njstack=0\nflag=0\na,temp"];
    for_loop [label="for (;;)"];
    cond1 [label="if (ir-l < M)", shape=diamond];
    block1 [label="j=l+1 to ir\n  a=arr[j]\n  i=j-1 downto l\n    if arr[i] <= a break\n    arr[i+1]=arr[i]\n  arr[i+1]=a"];
    cond2 [label="if (jstack == 0)", shape=diamond];
    break1 [label="break"];
    stack_pop [label="ir=istack[jstack--]\nl=istack[jstack--]"];
    block2 [label="k=(l+ir)>>1\nSWAP(arr[k],arr[l+1])"];
    cond3 [label="if (arr[l] > arr[ir])", shape=diamond];
    swap1 [label="SWAP(arr[l],arr[ir])"];
    cond4 [label="if (arr[l+1] > arr[ir])", shape=diamond];
    swap2 [label="SWAP(arr[l+1],arr[ir])"];
    cond5 [label="if (arr[l] > arr[l+1])", shape=diamond];
    swap3 [label="SWAP(arr[l],arr[l+1])"];
    init_partition [label="i=l+1\nj=ir\na=arr[l+1]"];
    inner_loop [label="for (;;)"];
    inc_i [label="i++\nwhile arr[i] < a i++"];
    dec_j [label="j--\nwhile arr[j] > a j--"];
    cond6 [label="if (j < i)", shape=diamond];
    break2 [label="break"];
    swap4 [label="SWAP(arr[i],arr[j])"];
    update_arr [label="arr[l+1]=arr[j]\narr[j]=a"];
    jstack_update [label="jstack += 2"];
    cond7 [label="if (ir-i+1 >= j-l)", shape=diamond];
    stack_push1 [label="istack[jstack]=ir\nistack[jstack-1]=i\nir=j-1"];
    stack_push2 [label="istack[jstack]=j-1\nistack[jstack-1]=l\nl=i"];

    start -> init;
    init -> for_loop;
    for_loop -> cond1;
    cond1 -> block1 [label="True"];
    cond1 -> block2 [label="False"];
    block1 -> cond2;
    cond2 -> break1 [label="True"];
    cond2 -> stack_pop [label="False"];
    break1 -> end;
    stack_pop -> for_loop;
    block2 -> cond3;
    cond3 -> swap1 [label="True"];
    cond3 -> cond4 [label="False"];
    swap1 -> cond4;
    cond4 -> swap2 [label="True"];
    cond4 -> cond5 [label="False"];
    swap2 -> cond5;
    cond5 -> swap3 [label="True"];
    cond5 -> init_partition [label="False"];
    swap3 -> init_partition;
    init_partition -> inner_loop;
    inner_loop -> inc_i;
    inc_i -> dec_j;
    dec_j -> cond6;
    cond6 -> break2 [label="True"];
    cond6 -> swap4 [label="False"];
    swap4 -> inner_loop;
    break2 -> update_arr;
    update_arr -> jstack_update;
    jstack_update -> cond7;
    cond7 -> stack_push1 [label="True"];
    cond7 -> stack_push2 [label="False"];
    stack_push1 -> for_loop;
    stack_push2 -> for_loop;

    // Infeasible paths
    cond2 -> stack_pop [label="False", color=red, fontcolor=red];
    cond3 -> cond4 [label="False", color=red, fontcolor=red];
    cond4 -> cond5 [label="False", color=red, fontcolor=red];
    cond5 -> init_partition [label="False", color=red, fontcolor=red];
    cond6 -> swap4 [label="False", color=red, fontcolor=red];
    cond7 -> stack_push2 [label="False", color=red, fontcolor=red];
}
```