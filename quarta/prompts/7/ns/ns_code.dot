digraph ns_code {
    rankdir=TB;
    node [shape=box];

    // Nos principais
    start [label="Inicio", shape=ellipse];
    end [label="Fim", shape=ellipse];
    
    // Blocos para a funcao foo
    foo_start [label="foo(x)\nint i, j, k, l"];
    loop_i [label="i = 0"];
    cond_i [label="i < 5", shape=diamond];
    loop_j [label="j = 0"];
    cond_j [label="j < 5", shape=diamond];
    loop_k [label="k = 0"];
    cond_k [label="k < 5", shape=diamond];
    loop_l [label="l = 0"];
    cond_l [label="l < 5", shape=diamond];
    body [label="if (keys[i][j][k][l] == x)", shape=diamond];
    return_found [label="return answer[i][j][k][l] + keys[i][j][k][l]"];
    return_not_found [label="return -1"];
    
    // Blocos para a funcao main
    main_start [label="main(void)"];
    call_foo [label="foo(400)"];
    cond_test [label="#ifdef TEST", shape=diamond];
    print_result [label="printf(\"result=%d\\n\", foo(400))"];
    
    // Arestas de controle
    start -> main_start;
    main_start -> call_foo;
    call_foo -> cond_test;
    cond_test -> print_result [label="Definido"];
    cond_test -> end [label="Nao Definido"];
    print_result -> end;
    
    // Arestas de controle para foo (simplificado)
    foo_start -> loop_i;
    loop_i -> cond_i;
    cond_i -> loop_j [label="True"];
    cond_i -> return_not_found [label="False"];
    loop_j -> cond_j;
    cond_j -> loop_k [label="True"];
    cond_j -> loop_i [label="False (i++)"];
    loop_k -> cond_k;
    cond_k -> loop_l [label="True"];
    cond_k -> loop_j [label="False (j++)"];
    loop_l -> cond_l;
    cond_l -> body [label="True"];
    cond_l -> loop_k [label="False (k++)"];
    body -> return_found [label="True"];
    body -> loop_l [label="False (l++)"];
    return_found -> end;
    return_not_found -> end;

    // Fluxo de dados (definicoes e usos)
    foo_start [xlabel="parametro: x"];
    body [xlabel="c-uso: keys, x, i, j, k, l"];
    return_found [xlabel="c-uso: answer, keys, i, j, k, l"];
    loop_i [xlabel="def: i"];
    loop_j [xlabel="def: j"];
    loop_k [xlabel="def: k"];
    loop_l [xlabel="def: l"];
    cond_i [xlabel="p-uso: i"];
    cond_j [xlabel="p-uso: j"];
    cond_k [xlabel="p-uso: k"];
    cond_l [xlabel="p-uso: l"];
}