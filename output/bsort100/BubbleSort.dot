
To construct the Control Flow Graph (CFG) for the provided code snippet, we break down each part into nodes representing basic blocks and connect them based on control flow. Each node also includes data dependencies.

### Nodes and Their Descriptions:

1. **Node A**: Check if `i > NUMELEMS-1`.  
   - Use: `i`
   - If true, exit the function; else proceed to Node B.

2. **Node B**: Enter outer loop body. Set `Sorted = TRUE`.  
   - Def: `Sorted`

3. **Node C**: Check if `Index > NUMELEMS-1` for inner loop.  
   - Use: `Index`
   - If true, break to Node G; else proceed to Node D.

4. **Node D**: Check if `Index > NUMELEMS - i`.  
   - Use: `Index`, `i`
   - If true, break to Node G; else proceed to Node E.

5. **Node E**: Compare `Array[Index]` and `Array[Index+1]`.  
   - Use: `Array[Index]`, `Array[Index+1]`

6. **Node F** (True from Node E): Swap elements and set `Sorted = FALSE`.  
   - Def: `Temp`, `Array[Index]`, `Array[Index+1]`, `Sorted`
   - Proceed to next iteration of inner loop (back to Node C).

7. **Node G**: After inner loop ends, check if `Sorted` is TRUE.  
   - Use: `Sorted`
   - If true, break outer loop; else proceed to next iteration.

### Control Flow Edges:

- **Node A** -> **Node B** [Label: "i <= NUMELEMS-1"]
- **Node B** -> **Node C** (implicit)
- **Node C** -> **Node D** (implicit)
  - **Node D** -> **Node G** [Label: "Index > NUMELEMS - i"] (break inner loop)
- **Node D** -> **Node E** [Label: "Index <= NUMELEMS - i"]
- **Node E** -> **Node F** [Label: "Array[Index] > Array[Index+1]"]
  - **Node F** -> **Node C** (implicit, back to inner loop)
- **Node E** -> **Node G** [Label: "no swap"]

### Data Dependencies:

Each node's dependencies are as listed above.

This CFG represents the control and data flow of the bubble sort algorithm, capturing all necessary conditions and variable uses/definitions.