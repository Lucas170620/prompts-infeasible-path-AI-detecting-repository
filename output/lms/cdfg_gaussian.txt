
```dot
digraph gaussian {
    rankdir=TB;
    node [shape=circle];
    
    1 [label="1", xlabel="Def: ready, gstore, rconst1, rconst2\nC-Use: none"];
    2 [label="2", xlabel="P-Use: ready"];
    3 [label="3"];
    4 [label="4"];
    5 [label="5"];
    6 [label="6"];
    7 [label="7", xlabel="Def: gaus, ready\nC-Use: v1, v2, r"];
    8 [label="8"];
    9 [label="9", xlabel="Def: gstore, gaus, ready\nC-Use: v1, v2, r"];
    10 [label="10", xlabel="P-Use: ready"];
    11 [label="11"];
    
    1 -> 2;
    2 -> 3 [label="True\n(ready == 0)"];
    2 -> 10 [label="False"];
    3 -> 4 [label="..."];
    4 -> 5 [label="(r <= 1.0)"];
    4 -> 3 [label="(r > 1.0)"];
    5 -> 6;
    6 -> 9;
    7 -> 8;
    8 -> 11 [label="..."];
    9 -> 7;
    10 -> 8;
    
    11 [shape=doublecircle];
}
```

<codigos - gaussian>
Node 1:
static int ready = 0;       /* flag to indicated stored value */
static float gstore;        /* place to store other value */
static float rconst1 = (float)(2.0/RAND_MAX);
static float rconst2 = (float)(RAND_MAX/2.0);
---

Node 2:
if(ready == 0) {
---

Node 3:
v1 = (float)lms_rand() - rconst2;
v2 = (float)lms_rand() - rconst2;
r = v1*v1 + v2*v2;
---

Node 4:
while(r > 1.0);
---

Node 5:
fac = lms_sqrt(lms_log(1.762)) * r;
---

Node 6:
gaus = fac * v2;
gstore = fac * v1;
ready = 1;
---

Node 7:
return gstore;
---

Node 8:
}
else {
return gaus;
}

</codigos>