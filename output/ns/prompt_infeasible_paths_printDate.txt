[code]
/* $Id: ns.c,v 1.2 2005/04/04 11:34:58 csg Exp $ */



/* Test of deeply nested loops and non-local exits */





/*-------------------------------------------------- *

 * LOG:

 *  $Log: ns.c,v $
 *  Revision 1.2  2005/04/04 11:34:58  csg
 *  again
 *

 *  Revision 1.1  2005/03/29 11:28:43  jgn

 *  New file.

 *

 *  Revision 1.8  2001/05/07 10:05:37  ijae

 *  no message

 *

 *  Revision 1.7  2001/04/25 12:48:15  ijae

 *  Corrected trace names.

 *

 *  Revision 1.6  2001/04/25 12:17:47  ijae

 *  no message

 *

 *  Revision 1.5  2001/04/25 12:11:31  ijae

 *  Compilable for V850

 *

 *  Revision 1.4  2001/04/25 12:09:55  ijae

 *  Now in target mode.

 *

 *  Revision 1.3  2001/04/25 12:06:36  ijae

 *  Now 4D array. Compiles & runs on PC

 *

 *  Revision 1.2  2001/04/25 11:59:38  ijae

 *  A bit more comments.

 *

 *-------------------------------------------------- */





/* -------------------------------------------------- *

 *  Define TEST to check the # iterations in inner loop,

 *  and that the right value is found and returned

 * -------------------------------------------------- */



//#define TEST



/* --------------------------------------------------

 *  Array of keys and values, 4-dimensional just

 *  for the fun of it.

 * -------------------------------------------------- */

int keys[5][5][5][5] =

{

  // [0]

  {

    // [0][0]

    {

      {0,0,0,0,0},

      {0,0,0,0,0},

      {0,0,0,0,0},

      {0,0,0,0,0},

      {0,0,0,0,0}

    },

    // [0][1]

    {

      {0,0,0,0,0},

      {0,0,0,0,0},

      {0,0,0,0,0},

      {0,0,0,0,0},

      {0,0,0,0,0}

    },

    // [0][2]

    {

      {0,0,0,0,0},

      {0,0,0,0,0},

      {0,0,0,0,0},

      {0,0,0,0,0},

      {0,0,0,0,0}

    },

    // [0][3]

    {

      {0,0,0,0,0},

      {0,0,0,0,0},

      {0,0,0,0,0},

      {0,0,0,0,0},

      {0,0,0,0,0}

    },

    // [0][4]

    {

      {0,0,0,0,0},

      {0,0,0,0,0},

      {0,0,0,0,0},

      {0,0,0,0,0},

      {0,0,0,0,0}

    }

  },

  // [1]

  {

    // [1][0]

    {

      {1,1,1,1,1},

      {1,1,1,1,1},

      {1,1,1,1,1},

      {1,1,1,1,1},

      {1,1,1,1,1}

    },

    // [1][1]

    {

      {1,1,1,1,1},

      {1,1,1,1,1},

      {1,1,1,1,1},

      {1,1,1,1,1},

      {1,1,1,1,1}

    },

    // [1][2]

    {

      {1,1,1,1,1},

      {1,1,1,1,1},

      {1,1,1,1,1},

      {1,1,1,1,1},

      {1,1,1,1,1}

    },

    // [1][3]

    {

      {1,1,1,1,1},

      {1,1,1,1,1},

      {1,1,1,1,1},

      {1,1,1,1,1},

      {1,1,1,1,1}

    },

    // [1][4]

    {

      {1,1,1,1,1},

      {1,1,1,1,1},

      {1,1,1,1,1},

      {1,1,1,1,1},

      {1,1,1,1,1}

    }

  },

  // [2]

  {

    // [2][0]

    {

      {2,2,2,2,2},

      {2,2,2,2,2},

      {2,2,2,2,2},

      {2,2,2,2,2},

      {2,2,2,2,2}

    },

    // [2][1]

    {

      {2,2,2,2,2},

      {2,2,2,2,2},

      {2,2,2,2,2},

      {2,2,2,2,2},

      {2,2,2,2,2}

    },

    // [2][2]

    {

      {2,2,2,2,2},

      {2,2,2,2,2},

      {2,2,2,2,2},

      {2,2,2,2,2},

      {2,2,2,2,2}

    },

    // [2][3]

    {

      {2,2,2,2,2},

      {2,2,2,2,2},

      {2,2,2,2,2},

      {2,2,2,2,2},

      {2,2,2,2,2}

    },

    // [2][4]

    {

      {2,2,2,2,2},

      {2,2,2,2,2},

      {2,2,2,2,2},

      {2,2,2,2,2},

      {2,2,2,2,2}

    }

  },

  // [3]

  {

    // [3][0]

    {

      {3,3,3,3,3},

      {3,3,3,3,3},

      {3,3,3,3,3},

      {3,3,3,3,3},

      {3,3,3,3,3}

    },

    // [3][1]

    {

      {3,3,3,3,3},

      {3,3,3,3,3},

      {3,3,3,3,3},

      {3,3,3,3,3},

      {3,3,3,3,3}

    },

    // [3][2]

    {

      {3,3,3,3,3},

      {3,3,3,3,3},

      {3,3,3,3,3},

      {3,3,3,3,3},

      {3,3,3,3,3}

    },

    // [3][3]

    {

      {3,3,3,3,3},

      {3,3,3,3,3},

      {3,3,3,3,3},

      {3,3,3,3,3},

      {3,3,3,3,3}

    },

    // [3][4]

    {

      {3,3,3,3,3},

      {3,3,3,3,3},

      {3,3,3,3,3},

      {3,3,3,3,3},

      {3,3,3,3,3}

    }

  },

  // [4]

  {

    // [4][0]

    {

      {4,4,4,4,4},

      {4,4,4,4,4},

      {4,4,4,4,4},

      {4,4,4,4,4},

      {4,4,4,4,4}

    },

    // [4][1]

    {

      {4,4,4,4,4},

      {4,4,4,4,4},

      {4,4,4,4,4},

      {4,4,4,4,4},

      {4,4,4,4,4}

    },

    // [4][2]

    {

      {4,4,4,4,4},

      {4,4,4,4,4},

      {4,4,4,4,4},

      {4,4,4,4,4},

      {4,4,4,4,4}

    },

    // [4][3]

    {

      {4,4,4,4,4},

      {4,4,4,4,4},

      {4,4,4,4,4},

      {4,4,4,4,4},

      {4,4,4,4,4}

    },

    // [4][4]

    {

      {4,4,4,4,4},

      {4,4,4,4,4},

      {4,4,4,4,4},

      {4,4,4,4,4},

      {4,4,4,4,

#ifdef FIND_TARGET

       400

#else

       401                      /* not searched for */

#endif

      }

    }

  }

};







int answer[5][5][5][5] =

{

  // [0]

  {

    // [0][0]

    {

      {123,123,123,123,123},

      {123,123,123,123,123},

      {123,123,123,123,123},

      {123,123,123,123,123},

      {123,123,123,123,123}

    },

    // [0][1]

    {

      {123,123,123,123,123},

      {123,123,123,123,123},

      {123,123,123,123,123},

      {123,123,123,123,123},

      {123,123,123,123,123}

    },

    // [0][2]

    {

      {123,123,123,123,123},

      {123,123,123,123,123},

      {123,123,123,123,123},

      {123,123,123,123,123},

      {123,123,123,123,123}

    },

    // [0][3]

    {

      {123,123,123,123,123},

      {123,123,123,123,123},

      {123,123,123,123,123},

      {123,123,123,123,123},

      {123,123,123,123,123}

    },

    // [0][4]

    {

      {123,123,123,123,123},

      {123,123,123,123,123},

      {123,123,123,123,123},

      {123,123,123,123,123},

      {123,123,123,123,123}

    }

  },

  // [1]

  {

    // [1][0]

    {

      {234,234,234,234,234},

      {234,234,234,234,234},

      {234,234,234,234,234},

      {234,234,234,234,234},

      {234,234,234,234,234}

    },

    // [1][1]

    {

      {234,234,234,234,234},

      {234,234,234,234,234},

      {234,234,234,234,234},

      {234,234,234,234,234},

      {234,234,234,234,234}

    },

    // [1][2]

    {

      {234,234,234,234,234},

      {234,234,234,234,234},

      {234,234,234,234,234},

      {234,234,234,234,234},

      {234,234,234,234,234}

    },

    // [1][3]

    {

      {234,234,234,234,234},

      {234,234,234,234,234},

      {234,234,234,234,234},

      {234,234,234,234,234},

      {234,234,234,234,234}

    },

    // [1][4]

    {

      {234,234,234,234,234},

      {234,234,234,234,234},

      {234,234,234,234,234},

      {234,234,234,234,234},

      {234,234,234,234,234}

    }

  },

  // [2]

  {

    // [2][0]

    {

      {345,345,345,345},

      {345,345,345,345},

      {345,345,345,345},

      {345,345,345,345},

      {345,345,345,345}

    },

    // [2][1]

    {

      {345,345,345,345},

      {345,345,345,345},

      {345,345,345,345},

      {345,345,345,345},

      {345,345,345,345}

    },

    // [2][2]

    {

      {345,345,345,345},

      {345,345,345,345},

      {345,345,345,345},

      {345,345,345,345},

      {345,345,345,345}

    },

    // [2][3]

    {

      {345,345,345,345},

      {345,345,345,345},

      {345,345,345,345},

      {345,345,345,345},

      {345,345,345,345}

    },

    // [2][4]

    {

      {345,345,345,345},

      {345,345,345,345},

      {345,345,345,345},

      {345,345,345,345},

      {345,345,345,345}

    }

  },

  // [3]

  {

    // [3][0]

    {

      {456,456,456,456,456},

      {456,456,456,456,456},

      {456,456,456,456,456},

      {456,456,456,456,456},

      {456,456,456,456,456}

    },

    // [3][1]

    {

      {456,456,456,456,456},

      {456,456,456,456,456},

      {456,456,456,456,456},

      {456,456,456,456,456},

      {456,456,456,456,456}

    },

    // [3][2]

    {

      {456,456,456,456,456},

      {456,456,456,456,456},

      {456,456,456,456,456},

      {456,456,456,456,456},

      {456,456,456,456,456}

    },

    // [3][3]

    {

      {456,456,456,456,456},

      {456,456,456,456,456},

      {456,456,456,456,456},

      {456,456,456,456,456},

      {456,456,456,456,456}

    },

    // [3][4]

    {

      {456,456,456,456,456},

      {456,456,456,456,456},

      {456,456,456,456,456},

      {456,456,456,456,456},

      {456,456,456,456,456}

    }

  },

  // [4]

  {

    // [4][0]

    {

      {567,567,567,567,567},

      {567,567,567,567,567},

      {567,567,567,567,567},

      {567,567,567,567,567},

      {567,567,567,567,567}

    },

    // [4][1]

    {

      {567,567,567,567,567},

      {567,567,567,567,567},

      {567,567,567,567,567},

      {567,567,567,567,567},

      {567,567,567,567,567}

    },

    // [4][2]

    {

      {567,567,567,567,567},

      {567,567,567,567,567},

      {567,567,567,567,567},

      {567,567,567,567,567},

      {567,567,567,567,567}

    },

    // [4][3]

    {

      {567,567,567,567,567},

      {567,567,567,567,567},

      {567,567,567,567,567},

      {567,567,567,567,567},

      {567,567,567,567,567}

    },

    // [4][4]

    {

      {567,567,567,567,567},

      {567,567,567,567,567},

      {567,567,567,567,567},

      {567,567,567,567,567},

      {567,567,567,567,1111}

    }

  }

};





int foo(int x)

{

#ifdef TEST

  int c = 0;                    /* counter for innerloop */

#endif

  int i,j,k,l;



  for(i=0; i<5; i++)

    for(j=0 ; j<5 ; j++)

      for(k=0 ; k<5 ; k++)

        for(l=0 ; l<5 ; l++)

        {

#ifdef TEST

          c++;

#endif

          if( keys[i][j][k][l] == x )

            {

#ifdef TEST

              printf("   %d\n",c);

#endif

              return answer[i][j][k][l] + keys[i][j][k][l];

            }

        }

  return -1;

}





void main(void)

{

#ifdef TEST

  printf("result=%d\n",foo(400));

#else

  foo(400);

#endif

}

---
[cdfg]

**Parte 1 - CÃ³digo Graphviz:**

```dot
digraph foo {
    rankdir=TB;
    node [shape=circle];
    
    1 [label="1", xlabel="Def: i\nC-Use: none"];
    2 [label="2", xlabel="P-Use: i < 5"];
    3 [label="3", xlabel="Def: j\nC-Use: i"];
    4 [label="4", xlabel="P-Use: j < 5"];
    5 [label="5", xlabel="Def: k\nC-Use: i, j"];
    6 [label="6", xlabel="P-Use: k < 5"];
    7 [label="7", xlabel="Def: l\nC-Use: i, j, k"];
    8 [label="8", xlabel="P-Use: l < 5"];
    9 [label="9", xlabel="Use: keys[i][j][k][l], x"];
    10 [label="10", xlabel="Return: answer[i][j][k][l] + keys[i][j][k][l]"];
    11 [label="11", xlabel="P-Use: none"];
    
    1 -> 2;
    2 -> 3 [label="True\n(i < 5)"];
    2 -> 11 [label="False"];
    3 -> 4;
    4 -> 5 [label="True\n(j < 5)"];
    4 -> 8 [label="False"];
    5 -> 6;
    6 -> 7 [label="True\n(k < 5)"];
    6 -> 10 [label="False"];
    7 -> 8;
    8 -> 9 [label="True\n(l < 5)"];
    8 -> 11 [label="False"];
    9 -> 10;
    10 -> 11;
    11 [shape=doublecircle];
}
```

**Parte 2 - Mapeamento CÃ³digo-NÃ³s:**

<codigos - foo>
Node 1:
for(i=0; i<5; i++)
---
Node 2:
i < 5
---
Node 3:
j = 0;
---
Node 4:
j < 5
---
Node 5:
k = 0;
---
Node 6:
k < 5
---
Node 7:
l = 0;
---
Node 8:
l < 5
---
Node 9:
if(keys[i][j][k][l] == x)
---
Node 10:
return answer[i][j][k][l] + keys[i][j][k][l];
</codigos>
---
 VocÃª Ã© um especialista em engenharia de software com expertise em teste estrutural, CDFG e Graphviz. Sua tarefa Ã© analisar um cÃ³digo e seu CDFG para identificar caminhos inviÃ¡veis (*infeasible paths*). Siga **rigorosamente** os passos abaixo.

---

#### **1. Contexto TeÃ³rico (Resumo)**  
- **CDFG**: Combina CFG (fluxo de controle) e DFG (fluxo de dados).  
- **Caminhos InviÃ¡veis**: SequÃªncias de nÃ³s/arestas inexequÃ­veis devido a:  
  - ContradiÃ§Ãµes lÃ³gicas (ex: `x > 10` e `x < 5` no mesmo caminho).  
  - DependÃªncias de dados (ex: variÃ¡vel nÃ£o inicializada).  
  - Conflitos em condiÃ§Ãµes sequenciais ou invariantes de programa.  

---

#### **2. Exemplo de AnÃ¡lise**  
**FunÃ§Ã£o de Exemplo:**  
```python
def example(x):
    if x > 10:     # NÃ³ A
        y = 5      # NÃ³ B
    else:
        y = 0      # NÃ³ C
    if y < 0:      # NÃ³ D
        return -1  # NÃ³ E
    return y       # NÃ³ F
```

**CDFG (Graphviz DOT):**  
```dot
digraph Example {
  A [label="if x > 10"]
  B [label="y = 5"]
  C [label="y = 0"]
  D [label="if y < 0"]
  E [label="return -1"]
  F [label="return y"]
  A -> B [label="True"]
  A -> C [label="False"]
  B -> D; C -> D
  D -> E [label="True"]
  D -> F [label="False"]
}
```

**AnÃ¡lise:**  
1. **Passo 1:** Rastrear caminhos no CDFG (ex: AâBâDâE).  
2. **Passo 2:** Verificar contradiÃ§Ãµes:  
   - Caminho `AâBâDâE`:  
     - Em `B`, `y = 5`.  
     - Em `D`, a condiÃ§Ã£o `y < 0` Ã© **falsa** porque `y = 5`.  
     - ConclusÃ£o: O caminho para `E` Ã© inviÃ¡vel.  
3. **SaÃ­da Formatada:**  
   ```markdown
   1. **Caminho InviÃ¡vel [example]**  
      - **Trechos de CÃ³digo**:  
        - Linha 2: `if x > 10`  
        - Linha 3: `y = 5`  
        - Linha 6: `if y < 0`  
        - Linha 7: `return -1`  
      - **DescriÃ§Ã£o**: NÃ³ A â NÃ³ B â NÃ³ D â NÃ³ E  
      - **Motivo**: ContradiÃ§Ã£o lÃ³gica: `y = 5` torna a condiÃ§Ã£o `y < 0` falsa.  
   ```

---

#### **3. Tarefa Principal**  
Analise o cÃ³digo e CDFG fornecidos abaixo:

**FunÃ§Ã£o:**  
```<printDate>```

**CDFG (Graphviz DOT):**  
```<INSIRA AQUI O CDFG>```

---

Execute **sequencialmente** estes passos:

**Passo 1: Mapeamento CÃ³digo-CDFG**  
- Relacione cada nÃ³/aresta do CDFG com trechos do cÃ³digo.  
- Exemplo: "NÃ³ A corresponde Ã  linha 5: `if x > 0`".

**Passo 2: IdentificaÃ§Ã£o de Caminhos Potenciais**  
- Liste todos os caminhos possÃ­veis no CDFG (ex: AâBâD, AâCâD).  
- Use a estrutura do CDFG para evitar omissÃµes.

**Passo 3. ClassificaÃ§Ã£o de Inviabilidade**  
Categorizar cada caminho inviÃ¡vel como:  
- **Estaticamente InviÃ¡vel:** InviÃ¡vel em todas as execuÃ§Ãµes (ex: lÃ³gica contraditÃ³ria)  
- **Dinamicamente InviÃ¡vel:** InviÃ¡vel sob condiÃ§Ãµes especÃ­ficas de entrada  

**Passo 4: AnÃ¡lise de Viabilidade por CritÃ©rio**  
Para cada caminho:  
1. **Dados**: VariÃ¡veis estÃ£o inicializadas? Valores sÃ£o consistentes?  
2. **LÃ³gica**: CondiÃ§Ãµes subsequentes se contradizem?  
3. **Contexto**: HÃ¡ invariantes (ex: `x â¥ 0`) que bloqueiam o caminho?  
4. **Loop**: CondiÃ§Ãµes de entrada/saÃ­da de loops sÃ£o satisfeitas?

**Passo 5: ConsolidaÃ§Ã£o**  
- Filtre caminhos que violam **pelo menos um critÃ©rio** como inviÃ¡veis.  
- Descreva cada um com:  
  - Trechos de cÃ³digo relevantes.  
  - SequÃªncia de nÃ³s.  
  - Motivo detalhado (ex: "`x = 5` no nÃ³ B contradiz `x != 5` no nÃ³ D").

---

#### **5. Formato de SaÃ­da Exigido**  
- Se houver caminhos inviÃ¡veis:  
  ```markdown
  # Caminhos InviÃ¡veis Identificados

  [NÃºmero]. **Caminho InviÃ¡vel [Nome da FunÃ§Ã£o]**  
    - **Trechos de CÃ³digo**:  
      - Linha [X]: `[cÃ³digo]`  
      - Linha [Y]: `[cÃ³digo]`  
    - **DescriÃ§Ã£o**: [SequÃªncia de nÃ³s, ex: A â B â C]  
    - **Motivo**: [ExplicaÃ§Ã£o tÃ©cnica com base nos critÃ©rios]  
  ```  
- Caso contrÃ¡rio:  
  `"Nenhum caminho inviÃ¡vel foi identificado."`