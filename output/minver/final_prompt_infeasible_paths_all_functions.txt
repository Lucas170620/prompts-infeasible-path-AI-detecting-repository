[code]
/* MDH WCET BENCHMARK SUITE */


/* 2012/09/28, Jan Gustafsson <jan.gustafsson@mdh.se>
 * Changes:
 *  - Missing braces around initialization of subobject added
 *  - This program redefines the standard C function fabs. Therefore, the
 *  function has been renamed to minver_fabs.
 */

/*************************************************************************/
/*                                                                       */
/*   SNU-RT Benchmark Suite for Worst Case Timing Analysis               */
/*   =====================================================               */
/*                              Collected and Modified by S.-S. Lim      */
/*                                           sslim@archi.snu.ac.kr       */
/*                                         Real-Time Research Group      */
/*                                        Seoul National University      */
/*                                                                       */
/*                                                                       */
/*        < Features > - restrictions for our experimental environment   */
/*                                                                       */
/*          1. Completely structured.                                    */
/*               - There are no unconditional jumps.                     */
/*               - There are no exit from loop bodies.                   */
/*                 (There are no 'break' or 'return' in loop bodies)     */
/*          2. No 'switch' statements.                                   */
/*          3. No 'do..while' statements.                                */
/*          4. Expressions are restricted.                               */
/*               - There are no multiple expressions joined by 'or',     */
/*                'and' operations.                                      */
/*          5. No library calls.                                         */
/*               - All the functions needed are implemented in the       */
/*                 source file.                                          */
/*                                                                       */
/*                                                                       */
/*************************************************************************/
/*                                                                       */
/*  FILE: minver.c                                                       */
/*  SOURCE : Turbo C Programming for Engineering by Hyun Soo Ahn         */
/*                                                                       */
/*  DESCRIPTION :                                                        */
/*                                                                       */
/*     Matrix inversion for 3x3 floating point matrix.                   */
/*                                                                       */
/*  REMARK :                                                             */
/*                                                                       */
/*  EXECUTION TIME :                                                     */
/*                                                                       */
/*                                                                       */
/*************************************************************************/


int minver(int row, int col, double eps);
int  mmul(int  row_a, int col_a, int row_b, int col_b);

static double  a[3][3] = {
  {3.0, -6.0,  7.0},
  {9.0,  0.0, -5.0},
  {5.0, -8.0,  6.0},
};
double  b[3][3], c[3][3], aa[3][3], a_i[3][3], e[3][3], det;


double minver_fabs(double n)
{
  double f;

  if (n >= 0) f = n;
  else f = -n;
  return f;
}

int main()
{
	int i, j;
	double eps;

	eps = 1.0e-6;

	for(i = 0; i < 3; i++)
	  for(j = 0; j < 3; j++)
	    aa[i][j] = a[i][j];

	minver(3, 3, eps);
	for(i = 0; i < 3; i++)
	  for(j = 0; j < 3; j++)
	    a_i[i][j] = a[i][j];

	mmul(3, 3, 3, 3);
	return 0;
}


int  mmul(int row_a, int col_a, int row_b, int col_b)
{
	 int i, j, k, row_c, col_c;
	 double w;

	 row_c = row_a;
	 col_c = col_b;

	 if(row_c < 1 || row_b < 1 || col_c < 1 || col_a != row_b) return(999);
	 for(i = 0; i < row_c; i++)
	 {
	   for(j = 0; j < col_c; j++)
	     {
	       w = 0.0;
	       for(k = 0; k < row_b; k++)
		 w += a[i][k] * b[k][j];
	       c[i][j] = w;
	     }
	 }
	 return(0);

}


int minver(int row, int col, double eps)
{

	int work[500], i, j, k, r, iw, s, t, u, v;
	double w, wmax, pivot, api, w1;

	if(row < 2 || row > 500 || eps <= 0.0) return(999);
	w1 = 1.0;
	for(i = 0; i < row; i++)
	  work[i] = i;
	for(k = 0; k < row; k++)
	  {
	    wmax = 0.0;
	    for(i = k; i < row; i++)
	      {
		w = minver_fabs(a[i][k]);
		if(w > wmax)
		  {
		    wmax = w;
		    r = i;
		  }
	      }
	    pivot = a[r][k];
	    api = minver_fabs(pivot);
	    if(api <= eps)
	      {
		det = w1;
		return(1);
	      }
	    w1 *= pivot;
	    u = k * col;
	    v = r * col;
	    if(r != k)
	      {
		w1 = -w;
		iw = work[k];
		work[k] = work[r];
		work[r] = iw;
		for(j = 0; j < row; j++)
		  {
		    s = u + j;
		    t = v + j;
		    w = a[k][j];
		    a[k][j] = a[r][j];
		    a[r][j] = w;
		  }
	      }
	    for(i = 0; i < row; i++)
	      a[k][i] /= pivot;
	    for(i = 0; i < row; i++)
	      {
		if(i != k)
		  {
		    v = i * col;
		    s = v + k;
		    w = a[i][k];
		    if(w != 0.0)
		      {
			for(j = 0; j < row; j++)
			  if(j != k) a[i][j] -= w * a[k][j];
			a[i][k] = -w / pivot;
		      }
		  }
	      }
	    a[k][k] = 1.0 / pivot;
	  }
	for(i = 0; i < row; i++)
	  {
	    while(1)
	      {
		k = work[i];
		if(k == i) break;
		iw = work[k];
		work[k] = work[i];
		work[i] = iw;
		for(j = 0; j < row; j++)
		  {
		    u = j * col;
		    s = u + i;
		    t = u + k;
		    w = a[k][i];
		    a[k][i] = a[k][k];
		    a[k][k] = w;
		  }
	      }
	  }
	det = w1;
	return(0);

}

---

---
[cdfg main]

```dot
digraph main_function {
    rankdir=TB;
    node [shape=circle];
    
    1 [label="1", xlabel="Def: eps\nC-Use: none"];
    2 [label="2", xlabel="P-Use: i"];
    3 [label="3", xlabel="Def: j"];
    4 [label="4", xlabel="P-Use: j"];
    5 [label="5", xlabel="C-Use: a, aa"];
    6 [label="6", xlabel="Def: none"];
    7 [label="7", xlabel="Def: i"];
    8 [label="8", xlabel="P-Use: i"];
    9 [label="9", xlabel="C-Use: a, aa"];
    10 [label="10", xlabel="Def: none"];
    11 [label="11", xlabel="Def: j"];
    12 [label="12", xlabel="P-Use: j"];
    13 [label="13", xlabel="C-Use: a, aa"];
    14 [label="14", xlabel="Def: none"];
    15 [label="15", xlabel="Def: i"];
    16 [label="16", xlabel="P-Use: i"];
    17 [label="17", xlabel="C-Use: a, aa"];
    18 [label="18", xlabel="Def: none"];
    19 [label="19", xlabel="C-Use: a, aa_i"];
    20 [label="20", xlabel="Def: none"];
    21 [label="21", xlabel="C-Use: function call"];
    22 [label="22", xlabel="Def: none"];
    23 [label="23", xlabel="C-Use: function call"];
    24 [label="24", xlabel="Def: none"];
    25 [label="25", xlabel="P-Use: return"];
    
    1 -> 2;
    2 -> 3;
    3 -> 4;
    4 -> 5;
    5 -> 6;
    6 -> 7;
    7 -> 8;
    8 -> 9;
    9 -> 10;
    10 -> 11;
    11 -> 12;
    12 -> 13;
    13 -> 14;
    14 -> 15;
    15 -> 16;
    16 -> 17;
    17 -> 18;
    18 -> 19;
    19 -> 20;
    20 -> 21;
    21 -> 22;
    22 -> 23;
    23 -> 24;
    24 -> 25;
}
```
---

---
[analise infeasible_paths main]

# Caminhos Inviáveis Identificados

Nenhum caminho inviável foi identificado.

```markdown
Nenhum caminho inviável foi identificado.
```

**Razão:** O código e o CDFG fornecidos seguem um fluxo linear de execução sem nenhuma bifurcação ou condição que possa levar a caminhos inviáveis. Todos os nós no CDFG são executados sequencialmente, desde o início (nó 1) até o fim (nó 25), sem contradições lógicas ou condições que impossibilitem a execução do fluxo principal.
---

---
[cdfg minver]

### Parte 1 - Código Graphviz:

```dot
digraph minver {
    rankdir=TB;
    node [shape=circle];
    
    1 [label="1", xlabel="Def: work, row, col, eps\nC-Use:"];
    2 [label="2", xlabel="P-Use: k"];
    3 [label="3", xlabel="Def: wmax, r, api, det, w1\nC-Use: a[i][k]"];
    4 [label="4", xlabel="P-Use: api"];
    5 [label="5", xlabel="P-Use: eps"];
    6 [label="6", xlabel="Def: det, return"];    
    7 [label="7", xlabel="Def: iw, work[r], work[k]\nC-Use: work[k]"];
    8 [label="8", xlabel="Def: a[k][i], a[i][j]\nC-Use: a[k][j], w"];
    9 [label="9", xlabel="P-Use: w, j"];
    10 [label="10", xlabel="Def: a[i][k], a[r][j]"];
    11 [label="11", xlabel="Def: u, v, s, t, iw\nC-Use: work[i]"];
    12 [label="12", xlabel="P-Use: k"];
    13 [label="13", xlabel="Def: det, return"];    
    14 [label="14", xlabel="Shape=doublecircle"];

    1 -> 2;
    2 -> 3 [label="True\nk < row"];
    2 -> 14 [label="False"];
    3 -> 4;
    4 -> 5 [label="api <= eps"];
    4 -> 6 [label="False"];
    5 -> 7 [label="False"];
    6 -> 7 [label="True"];
    7 -> 8;
    8 -> 9 [label="j != k"];
    8 -> 10 [label="False"];
    9 -> 8;
    10 -> 7;
    11 -> 12 [label="k != row"];
    12 -> 13 [label="True"];
    13 -> 14 [label="False"];
}
```

### Parte 2 - Mapeamento Código-Nós (em tags):

<codigos - minver>
Node 1:
int work[500], i, j, k, r, iw, s, t, u, v;
double w, wmax, pivot, api, w1;

if(row < 2 || row > 500 || eps <= 0.0) return(999);
w1 = 1.0;
for(i = 0; i < row; i++)
  work[i] = i;
for(k = 0; k < row; k++) {
---
Node 2:
k = 0; k < row; k++ {
---
Node 3:
wmax = 0.0;
for(i = k; i < row; i++) {
  w = minver_fabs(a[i][k]);
  if(w > wmax) {
    wmax = w;
    r = i;
  }
}
pivot = a[r][k];
api = minver_fabs(pivot);
if(api <= eps) {
  det = w1;
  return(1);
}
w1 *= pivot;
u = k * col;
v = r * col;
if(r != k) {
---
Node 4:
if(api <= eps)
---
Node 5:
eps <= 0.0
---
Node 6:
return(1);
---
Node 7:
iw = work[k];
work[r] = work[k];
work[k] = work[r];
---
Node 8:
a[k][i] /= a[k][k];
for(j = k+1; j < col; j++) {
  factor = a[i][k] / a[k][k];
  a[i][j] -= factor * a[k][j];
}
for(i = 0; i < row; i++) {
  if(i != k) {
    factor = -a[i][k] / a[k][k];
    for(j = k; j < col; j++)
      a[i][j] += factor * a[k][j];
  }
}
---
Node 9:
j < col;
---
Node 10:
return(999);
---
Node 11:
for(k = 0; k < row; k++) {
  for(i = 0; i < row; i++) {
    u = work[i] * col + k;
    v = work[i] * col + k;
    if(u != v) {
      s = a[u][k];
      a[u][k] = a[v][k];
      a[v][k] = s;
    }
  }
}
det = w1;
return(0);
---
Node 12:
k < row;
---
Node 13:
return(0);
---
</codigos>
---

---
[analise infeasible_paths minver]

The function minver does not contain any infeasible paths due to logical contradictions. All possible execution paths eventually lead to a valid return statement based on the initial conditions and matrix properties.

**Step-by-Step Explanation:**

1. **Initial Checks (Node 1):**
   - The function first verifies if `eps` is non-positive or if `row` is outside the range [2, 500]. If any condition is met, it returns 999 immediately.
   
2. **Loop Through Rows (Nodes 2-3):**
   - For each row index `k`, compute the maximum element in column `k` from row `k` to `row`. This determines the pivot row `r`.
   - Calculate the absolute value of the pivot (`api`). If `api` is less than or equal to `eps`, return 1, indicating a singular matrix within numerical precision.
   
3. **Pivot Processing (Node7):**
   - Swap elements in the work array if `r` is not equal to `k`. This step doesn't affect subsequent logic significantly but ensures proper row permutation tracking.
   
4. **Row Operations (Node8):**
   - Perform row operations using the pivot to eliminate elements below and above the diagonal, standard steps in Gaussian elimination. These operations are valid as long as `api` is greater than `eps`, ensuring a non-zero pivot.

5. **Post-Processing Loop (Node11):**
   - After all pivots are processed, permute the rows of the matrix based on the work array to reflect row swaps performed during elimination.

6. **Return Determinant and Result:**
   - The function sets `det = w1` (the product of pivots) and returns 0, indicating successful computation.

**Conclusion:**

All paths through the code either terminate early with a valid return value or proceed correctly to compute the matrix inverse under the assumption that it is non-singular within numerical precision. There are no logical contradictions or impossible conditions that would render any path infeasible beyond what's already handled by early returns.
---

---
[cdfg mmul]

**Parte 1 - Código Graphviz:**

```dot
digraph mmul {
    rankdir=TB;
    node [shape=circle];
    
    1 [label="1", xlabel="Def: row_c, col_c\nC-Use: row_a, col_a, row_b, col_b"];
    2 [label="2", xlabel="P-Use: row_c < 1, row_b < 1, col_c < 1, col_a != row_b"];
    3 [label="3", xlabel="Return 999"];
    4 [label="4", xlabel="Def: i=0\nC-Use: row_c"];
    5 [label="5", xlabel="P-Use: i < row_c"];
    6 [label="6", xlabel="Def: j=0\nC-Use: col_c"];
    7 [label="7", xlabel="P-Use: j < col_c"];
    8 [label="8", xlabel="Def: w=0.0\nC-Use: row_b, k"];
    9 [label="9", xlabel="Loop over k from 0 to row_b"];
    10 [label="10", xlabel="Multiply and accumulate a[i][k] * b[k][j]];
    11 [label="11", xlabel="Def: c[i][j]=w"];
    12 [label="12", xlabel="End of j loop"];
    13 [label="13", xlabel="Return 0"];
    
    1 -> 2;
    2 -> 3 [label="True\nInvalid dimensions"];
    2 -> 4 [label="False"];
    4 -> 5 [label="Loop condition"];
    5 -> 6 [label="Continue"];
    6 -> 7;
    7 -> 8 [label="Continue"];
    8 -> 9;
    9 -> 10;
    10 -> 11;
    11 -> 12;
    12 -> 13;
    
    3, 13 [shape=doublecircle];
}
```

**Parte 2 - Mapeamento Código-Nós:**

```codigos - mmul
Node 1:
int row_c = row_a;
col_c = col_b;

---
Node 2:
if(row_c < 1 || row_b < 1 || col_c < 1 || col_a != row_b) return(999);
---

Node 4:
for(i = 0; i < row_c; i++)
{
---

Node 5:
i++ 
}
for(j = 0; j < col_c; j++)
{
j++
}
w = 0.0;
for(k = 0; k < row_b; k++)
{
k++;
w += a[i][k] * b[k][j];
}
c[i][j] = w;
---
Node 12:
return(0);
---
```

This DOT file represents the CDFG for `mmul`, capturing control flow and data dependencies with nodes and edges, and correctly terminates at the return statements.
---

---
[analise infeasible_paths mmul]

```markdown
# Caminhos Inviáveis Identificados

1. **Caminho Inviável [mmul]**
   - **Trechos de Código**:  
     - Linha 2: `if (row_c < 1 || row_b < 1 || col_c < 1 || col_a != row_b)`  
     - Linha 3: `return 999`  
   - **Descrição**: Nó 2 → Nó 3  
   - **Motivo**: Contradição lógica: As condições verificadas em `row_c`, `row_b`, `col_c`, e `col_a` nunca são verdadeiras para matrizes 3x3, tornando este caminho estáticamente inviável.
```
---

---
[cdfg minver_fabs]

```dot
digraph minver_fabs {
    rankdir=TB;
    node [shape=circle];
    
    1 [label="1", xlabel="Def: f"];
    2 [label="2", xlabel="P-Use: n"];
    3 [label="3"];
    4 [label="4", xlabel="Def: result"];
    5 [label="5", shape=doublecircle];
    
    1 -> 2;
    2 -> 3 [label="True\n(n >= 0)"];
    2 -> 4 [label="False\n(n < 0)"];
    3 -> 5 [label="return n"];
    4 -> 5 [label="return -n"];
}
```

<codigos - minver_fabs>
Node 1:
double f;
if (n >= 0) {
    f = n;
} else {
    f = -n;
}
return f;
---
Node 2:
if (n >= 0)
---
Node 3:
f = n
---
Node 4:
f = -n
</codigos>
---

---
[analise infeasible_paths minver_fabs]

Nenhum caminho inviável foi identificado.
---

---
**Análise de Caminhos Inviáveis em Código - Especialista em Testes Estruturais**

**Instruções de Entrada:**  
Forneça:  
1. O código-fonte a ser analisado  
2. Para cada função no código, inclua:  
   - O **CDFG (Control Data Flow Graph)** correspondente, representando todos os nós (operações/blocos básicos) e arestas (fluxos de controle)  
   - Uma **análise preliminar** indicando possíveis *infeasible paths* identificados  

---

**Processo de Análise (Executado Automaticamente):**  

**1. Mapeamento CDFG-Função**  
Para cada função no código:  
- Identificar nós críticos (ex: branches com condições dependentes de dados)  
- Mapear arestas do CDFG para trechos de código correspondentes  

**2. Detecção de Infeasible Paths**  
Analisar cada caminho do CDFG considerando:  
- **Dependências de Dados:** Caminhos onde variáveis têm estados conflitantes  
- **Constraints Lógicas:** Condições mutualmente exclusivas (ex: `(x > 0 && x < 0)`)  
- **Invariantes de Loop:** Caminhos que violam condições de saída de loops  
- **Dead Code:** Blocos inalcançáveis identificados no CDFG  

**3. Classificação de Inviabilidade**  
Categorizar cada caminho inviável como:  
- **Estaticamente Inviável:** Inviável em todas as execuções (ex: lógica contraditória)  
- **Dinamicamente Inviável:** Inviável sob condições específicas de entrada  

**4. Relatório Consolidado**  
Gerar para cada função:  
- Lista de caminhos inviáveis com localização no código  
- Justificativa técnica baseada no CDFG  
- Impacto na cobertura de testes estruturais  
- Recomendações para refinamento do CDFG/código  

---

**Exemplo de Saída Esperada:**  
```  
Função: calculate_grade  
- Caminho Inviável #1: Nós [A3→B5→C7]  
  Motivo: Condição "score > 100 && score < 50" é logicamente impossível  
  Efeito: Dead code detectado no bloco C7  
- Caminho Inviável #2: Nós [A3→D9]  
  Motivo: Variável 'initialized' deve ser false em A3 mas true em D9  
```  

**Nota Técnica:** Esta análise assume que o CDFG fornecido reflete fielmente o fluxo de controle e dados. Inviabilidades detectadas podem indicar oportunidades de otimização ou necessidade de revisão do modelo.
---
