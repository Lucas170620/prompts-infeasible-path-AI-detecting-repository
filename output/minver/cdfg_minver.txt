
### Parte 1 - Código Graphviz:

```dot
digraph minver {
    rankdir=TB;
    node [shape=circle];
    
    1 [label="1", xlabel="Def: work, row, col, eps\nC-Use:"];
    2 [label="2", xlabel="P-Use: k"];
    3 [label="3", xlabel="Def: wmax, r, api, det, w1\nC-Use: a[i][k]"];
    4 [label="4", xlabel="P-Use: api"];
    5 [label="5", xlabel="P-Use: eps"];
    6 [label="6", xlabel="Def: det, return"];    
    7 [label="7", xlabel="Def: iw, work[r], work[k]\nC-Use: work[k]"];
    8 [label="8", xlabel="Def: a[k][i], a[i][j]\nC-Use: a[k][j], w"];
    9 [label="9", xlabel="P-Use: w, j"];
    10 [label="10", xlabel="Def: a[i][k], a[r][j]"];
    11 [label="11", xlabel="Def: u, v, s, t, iw\nC-Use: work[i]"];
    12 [label="12", xlabel="P-Use: k"];
    13 [label="13", xlabel="Def: det, return"];    
    14 [label="14", xlabel="Shape=doublecircle"];

    1 -> 2;
    2 -> 3 [label="True\nk < row"];
    2 -> 14 [label="False"];
    3 -> 4;
    4 -> 5 [label="api <= eps"];
    4 -> 6 [label="False"];
    5 -> 7 [label="False"];
    6 -> 7 [label="True"];
    7 -> 8;
    8 -> 9 [label="j != k"];
    8 -> 10 [label="False"];
    9 -> 8;
    10 -> 7;
    11 -> 12 [label="k != row"];
    12 -> 13 [label="True"];
    13 -> 14 [label="False"];
}
```

### Parte 2 - Mapeamento Código-Nós (em tags):

<codigos - minver>
Node 1:
int work[500], i, j, k, r, iw, s, t, u, v;
double w, wmax, pivot, api, w1;

if(row < 2 || row > 500 || eps <= 0.0) return(999);
w1 = 1.0;
for(i = 0; i < row; i++)
  work[i] = i;
for(k = 0; k < row; k++) {
---
Node 2:
k = 0; k < row; k++ {
---
Node 3:
wmax = 0.0;
for(i = k; i < row; i++) {
  w = minver_fabs(a[i][k]);
  if(w > wmax) {
    wmax = w;
    r = i;
  }
}
pivot = a[r][k];
api = minver_fabs(pivot);
if(api <= eps) {
  det = w1;
  return(1);
}
w1 *= pivot;
u = k * col;
v = r * col;
if(r != k) {
---
Node 4:
if(api <= eps)
---
Node 5:
eps <= 0.0
---
Node 6:
return(1);
---
Node 7:
iw = work[k];
work[r] = work[k];
work[k] = work[r];
---
Node 8:
a[k][i] /= a[k][k];
for(j = k+1; j < col; j++) {
  factor = a[i][k] / a[k][k];
  a[i][j] -= factor * a[k][j];
}
for(i = 0; i < row; i++) {
  if(i != k) {
    factor = -a[i][k] / a[k][k];
    for(j = k; j < col; j++)
      a[i][j] += factor * a[k][j];
  }
}
---
Node 9:
j < col;
---
Node 10:
return(999);
---
Node 11:
for(k = 0; k < row; k++) {
  for(i = 0; i < row; i++) {
    u = work[i] * col + k;
    v = work[i] * col + k;
    if(u != v) {
      s = a[u][k];
      a[u][k] = a[v][k];
      a[v][k] = s;
    }
  }
}
det = w1;
return(0);
---
Node 12:
k < row;
---
Node 13:
return(0);
---
</codigos>