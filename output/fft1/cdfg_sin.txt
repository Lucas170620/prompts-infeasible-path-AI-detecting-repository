
```dot
digraph sin {
    rankdir=TB;
    node [shape=circle];
    
    1 [label="1", xlabel="Def: app, diff, inc\nC-Use: rad"];
    2 [label="2", xlabel="P-Use: rad"];
    3 [label="3", xlabel="Def: rad\nC-Use: rad"];
    4 [label="4", xlabel="P-Use: rad"];
    5 [label="5", xlabel="Def: app, diff, inc\nC-Use: rad"];
    6 [label="6", xlabel="P-Use: diff"];
    7 [label="7", xlabel="Def: app, diff, inc\nC-Use: rad, diff"];
    8 [label="8", xlabel="P-Use: diff"];
    9 [label="9", xlabel="Return: app"];
    
    1 -> 2;
    2 -> 3 [label="True\n(rad > 2*PI)"];
    2 -> 4 [label="False"];
    3 -> 5;
    4 -> 5;
    5 -> 6 [label="True\n(rad < -2*PI)"];
    5 -> 7 [label="False"];
    6 -> 7;
    7 -> 8 [label="True\n(fabs(diff) >= 0.00001)"];
    7 -> 9 [label="False"];
    8 -> 9;
}
```

<codigos - sin>
Node 1:
static double sin(rad)
double rad;
{
    double app;

    double diff;
    int inc = 1;

    while (rad > 2*PI) {
        rad -= 2*PI;
    }
    while (rad < -2*PI) {
        rad += 2*PI;
    }
    app = diff = rad;
    diff = (diff * (-(rad*rad))) /
        ((2.0 * inc) * (2.0 * inc + 1.0));
    app = app + diff;
    inc++;
    
Node 2:
while (rad > 2*PI)
    rad -= 2*PI;

Node 3:
while (rad < -2*PI)
    rad += 2*PI;

Node 4:
app = diff = rad;

Node 5:
diff = (diff * (-(rad*rad))) /
    ((2.0 * inc) * (2.0 * inc + 1.0));
app = app + diff;
inc++;

Node 6:
while(fabs(diff) >= 0.00001) {

Node 7:
diff = (diff * (-(rad*rad))) /
    ((2.0 * inc) * (2.0 * inc + 1.0));
app = app + diff;
inc++;
}
</codigos>