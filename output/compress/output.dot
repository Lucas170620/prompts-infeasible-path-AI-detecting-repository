digraph output {
    rankdir=TB;
    node [shape=circle];
    
    1 [label="1", xlabel="Def: r_off, bits; Use: buf"];
    2 [label="2", xlabel="Use: code"];
    3 [label="3", xlabel="P-Use: offset"];
    4 [label="4", xlabel="C-Use: *bp, code"];
    5 [label="5", xlabel="Def: bp; Use: buf"];
    6 [label="6", xlabel="Use: bits, r_off, code"];
    7 [label="7", xlabel="P-Use: offset"];
    8 [label="8", xlabel="Use: n_bits"];
    9 [label="9", xlabel="Def: maxcode; Use: n_bits, INIT_BITS"];
    10[label="10",xlabel="Def: clear_flg; Use: code"];
    11[label="11",xlabel="Use: offset, buf"];
    12[label="12",xlabel="P-Use: bits"];
    13[label="13",xlabel="Def: bytes_out"];
    14[label="14",xlabel="Def: code; Use: offset"];
    15[label="15",xlabel="C-Use: buf"];
    16[label="16",xlabel="P-Use: offset, bits"];
    17[label="17",xlabel="Def: isEOF"];
    
    1 -> 2;
    2 -> 3 [label="code >= 0"];
    2 -> 17 [label="code < 0"];
    3 -> 4 [label="bits == n_bits"];
    4 -> 5;
    5 -> 6 [label="bits >= 8"];
    6 -> 7 [label="bits <= 0"];
    7 -> 8 [label="bits > 0"];
    8 -> 9 [label="free_ent > maxcode || (clear_flg)"];
    9 -> 10;
    10-> 11 [label="offset > 0"];
    11-> 12 [label="isEOF"];
    12-> 13 [label="bits > 0"];
    13-> 14 [label="offset == 0"];
    14-> 15;
    15-> 16;
    16-> 17;
    17[shape=doublecircle];
}