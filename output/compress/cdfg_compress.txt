
### Parte 1 - Código Graphviz:

```dot
digraph compress {
    rankdir=TB;
    node [shape=circle];
    
    1 [label="1", xlabel="Def: r_off, bits\nC-Use: code"];
    2 [label="2", xlabel="P-Use: code"];
    3 [label="3", xlabel="Def: bp, r_off, bits\nC-Use: buf"];
    4 [label="4", xlabel="P-Use: offset"];
    5 [label="5", xlabel="Def: offset\nC-Use: n_bits"];
    6 [label="6", xlabel="P-Use: offset"];
    7 [label="7", xlabel="Def: code, offset\nC-Use: buf"];
    8 [label="8", xlabel="P-Use: offset"];
    9 [label="9", xlabel="Def: bits, offset\nC-Use: n_bits"];
    10 [label="10", xlabel="P-Use: offset, bits"];
    11 [label="11", xlabel="Def: offset"];
    12 [label="12", xlabel="P-Use: free_ent, maxcode"];
    13 [label="13", xlabel="Def: maxcode, n_bits\nC-Use: maxbits"];
    14 [label="14", xlabel="P-Use: code"];
    15 [label="15", xlabel="Def: offset, bits\nC-Use: buf"];
    16 [label="16", xlabel="P-Use: offset, bits"];
    17 [label="17", xlabel="Def: offset"];
    18 [label="18", xlabel="P-Use: offset"];
    19 [label="19", xlabel="Double Circle\nFinal Node"];
    
    1 -> 2;
    2 -> 3 [label="True\n(code >= 0)"];
    2 -> 4 [label="False"];
    3 -> 5 [label="if (offset == (n_bits << 3))"];
    5 -> 6 [label="if (bits >= 8)"];
    6 -> 7 [label="if (bits != 0)"];
    7 -> 8;
    8 -> 9 [label="if (free_ent > maxcode || ((clear_flg > 0)))"];
    9 -> 10 [label="if (offset > 0)"];
    10 -> 11 [label="if (clear_flg)"];
    11 -> 12;
    12 -> 13 [label="if (n_bits < maxbits)"];
    13 -> 14;
    14 -> 15;
    15 -> 16 [label="if (offset > 0)"];
    16 -> 17;
    17 -> 18;
    18 -> 19;
}
```

### Parte 2 - Mapeamento Código-Nós:

```codigos-compress
Node 1:
register int r_off = offset, bits= n_bits;
register char * bp = buf;

Node 2:
if (code >= 0) {

Node 3:
bp += (r_off >> 3);
r_off &= 7;

Node 4:
*bp = ((*bp & rmask[r_off]) | (code << r_off)) & lmask[r_off];
bp++;
bits -= (8 - r_off);
code >>= 8 - r_off;

Node 5:
if (offset == (n_bits << 3)) {

Node 6:
if (bits >= 8) {

Node 7:
*bp++ = code;
bits -= 8;
code >>= 8;

Node 8:
if (bits != 0) {

Node 9:
*bp = code;

Node 10:
if (free_ent > maxcode || ((clear_flg > 0))) {

Node 11:
if (offset > 0) {

Node 12:
writebytes(buf, n_bits);
bytes_out += n_bits;
offset = 0;

Node 13:
maxcode = MAXCODE(n_bits = INIT_BITS);

Node 14:
else {
    maxcode = MAXCODE(n_bits);

Node 15:
if (offset > 0) {

Node 16:
writebytes(buf, ((offset + 7) / 8));

Node 17:
bytes_out += (offset + 7) / 8;

Node 18:
return;
}
```

This DOT code and mapping represent the control and data flow of the `compress` function, showing each basic block, variable usages, and control flow transitions.