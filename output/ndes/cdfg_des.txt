
### Parte 1 - Código Graphviz:

```dot
digraph des {
    rankdir=TB;
    node [shape=circle];
    
    1 [label="1", xlabel="Def: inp.l, inp.r, key.l, key.r\nC-Use: KNOWN_VALUE"];
    2 [label="2", xlabel="Def: newkey, isw"];
    3 [label="3"];
    4 [label="4", xlabel="P-Use: value"];
    5 [label="5"];
    6 [label="6"];
    7 [label="7"];
    8 [label="8"];
    9 [label="9"];
    10 [label="10"];
    11 [label="11"];
    12 [label="12"];
    13 [label="13"];
    14 [label="14"];
    15 [label="15"];
    16 [label="16"];
    17 [label="17"];
    18 [label="18"];
    19 [label="19"];
    20 [label="20"];
    21 [label="21"];
    22 [label="22"];
    23 [label="23"];
    24 [label="24"];
    25 [label="25"];
    26 [label="26"];
    27 [label="27"];
    28 [label="28"];
    29 [label="29"];
    30 [label="30"];
    31 [label="31"];
    32 [label="32"];
    33 [label="33"];
    34 [label="34"];
    
    1 -> 2;
    2 -> 3;
    3 -> 4 [label="True\n(value == 1)"];
    3 -> 5 [label="False"];
    4 -> 6;
    5 -> 6;
    6 -> 7;
    7 -> 8 [label="j >= 1"];
    7 -> 9 [label="j < 1"];
    8 -> 10;
    9 -> 10;
    10 -> 11;
    11 -> 12 [label="jj >= 1"];
    11 -> 13 [label="jj < 1"];
    12 -> 14;
    13 -> 14;
    14 -> 15;
    15 -> 16;
    16 -> 17;
    17 -> 18;
    18 -> 19 [label="j <= 4"];
    18 -> 20 [label="j > 4"];
    19 -> 21;
    20 -> 21;
    21 -> 22;
    22 -> 23;
    23 -> 24 [label="m <= 5"];
    23 -> 25 [label="m > 5"];
    24 -> 26;
    25 -> 26;
    26 -> 27;
    27 -> 28;
    28 -> 29 [label="jj >= 1"];
    28 -> 30 [label="jj < 1"];
    29 -> 31;
    30 -> 31;
    31 -> 32;
    32 -> 33;
    33 -> 34;
    34 [shape=doublecircle];
}
```

### Parte 2 - Mapeamento Código-Nós:

<codigos - des>
Node 1:
inp.l = KNOWN_VALUE * 35;
inp.r = KNOWN_VALUE * 26;
key.l = KNOWN_VALUE * 2;
key.r = KNOWN_VALUE * 16;

newkey = value;
isw = value;

---
Node 2:
des(inp, key, &newkey, isw, &out);
/*   printf("%u %u\n", out.l, out.r);*/
return 0;
</codigos>

---

This CDFG represents the control and data flow of the `des` function. Each node corresponds to a basic block in the code, with edges representing control flow between blocks. Nodes are labeled with their corresponding code snippets and usage information. The graph ends with a double circle at node 34, indicating the termination point.