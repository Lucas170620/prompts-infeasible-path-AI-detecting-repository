
To model the `logsch` function as a Hybrid CDFG in Graphviz, we'll represent each basic block as a node with its definitions and uses, and connect them via edges for control flow. Here's the detailed structure:

```graphviz
digraph logsch_CDFG {
    node1 [label="Entry\nUses: ih, nbh"];
    node2 [label="Compute wd = ((long)nbh * 127L) >>7L\ndefinitions: wd"];
    node3 [label="Compute nbh = wd + wh_code_table[ih]\ndefinitions: nbh"];
    node4 [label="if (nbh <0)\nuses: nbh"];
    node5a [label="nbh = 0\ndefinitions: nbh"];
    node6 [label="Proceed\nNo change"];
    node7 [label="if (nbh>22528)\nuses: nbh"];
    node8a [label="nbh=22528\ndefinitions: nbh"];
    node9 [label="Return nbh"];

    // Control Flow Edges
    node1 -> node2;
    node2 -> node3;
    node3 -> node4;
    node4 -> node5a [label="if true"];
    node4 -> node6 [label="if false"];
    node6 -> node7;
    node5a -> node7;
    node7 -> node8a [label="if true"];
    node7 -> node9 [label="if false"];
    node8a -> node9;

    // Data Flow within Nodes (not explicitly shown in edges, but implied)
}
```

This graph shows:

1. **Entry** node where the function starts and uses parameters `ih` and `nbh`.
2. **node2**: Computes `wd` using `nbh`, defining `wd`.
3. **node3**: Recomputes `nbh` using `wd` and a table lookup.
4. **node4**: Checks if `nbh <0`. If true, proceeds to set `nbh=0`; else continues.
5. **node5a**/**node6**: Handles the first condition's outcome.
6. **node7**: Checks if `nbh>22528`, handling it by setting `nbh` or proceeding.
7. **node8a**: Sets `nbh` to 22528 if needed, then proceeds to return.

Each node captures the necessary definitions and uses, with control flow edges showing possible execution paths.