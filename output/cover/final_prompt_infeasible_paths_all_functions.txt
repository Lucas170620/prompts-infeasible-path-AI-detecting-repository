[code]
int swi120(int c)
{
	int i;
	for (i=0; i<120; i++) {
		switch (i) {
			case 0: c++; break;
			case 1: c++; break;
			case 2: c++; break;
			case 3: c++; break;
			case 4: c++; break;
			case 5: c++; break;
			case 6: c++; break;
			case 7: c++; break;
			case 8: c++; break;
			case 9: c++; break;
			case 10: c++; break;
			case 11: c++; break;
			case 12: c++; break;
			case 13: c++; break;
			case 14: c++; break;
			case 15: c++; break;
			case 16: c++; break;
			case 17: c++; break;
			case 18: c++; break;
			case 19: c++; break;
			case 20: c++; break;
			case 21: c++; break;
			case 22: c++; break;
			case 23: c++; break;
			case 24: c++; break;
			case 25: c++; break;
			case 26: c++; break;
			case 27: c++; break;
			case 28: c++; break;
			case 29: c++; break;
			case 30: c++; break;
			case 31: c++; break;
			case 32: c++; break;
			case 33: c++; break;
			case 34: c++; break;
			case 35: c++; break;
			case 36: c++; break;
			case 37: c++; break;
			case 38: c++; break;
			case 39: c++; break;
			case 40: c++; break;
			case 41: c++; break;
			case 42: c++; break;
			case 43: c++; break;
			case 44: c++; break;
			case 45: c++; break;
			case 46: c++; break;
			case 47: c++; break;
			case 48: c++; break;
			case 49: c++; break;
			case 50: c++; break;
			case 51: c++; break;
			case 52: c++; break;
			case 53: c++; break;
			case 54: c++; break;
			case 55: c++; break;
			case 56: c++; break;
			case 57: c++; break;
			case 58: c++; break;
			case 59: c++; break;
			case 60: c++; break;
			case 61: c++; break;
			case 62: c++; break;
			case 63: c++; break;
			case 64: c++; break;
			case 65: c++; break;
			case 66: c++; break;
			case 67: c++; break;
			case 68: c++; break;
			case 69: c++; break;
			case 70: c++; break;
			case 71: c++; break;
			case 72: c++; break;
			case 73: c++; break;
			case 74: c++; break;
			case 75: c++; break;
			case 76: c++; break;
			case 77: c++; break;
			case 78: c++; break;
			case 79: c++; break;
			case 80: c++; break;
			case 81: c++; break;
			case 82: c++; break;
			case 83: c++; break;
			case 84: c++; break;
			case 85: c++; break;
			case 86: c++; break;
			case 87: c++; break;
			case 88: c++; break;
			case 89: c++; break;
			case 90: c++; break;
			case 91: c++; break;
			case 92: c++; break;
			case 93: c++; break;
			case 94: c++; break;
			case 95: c++; break;
			case 96: c++; break;
			case 97: c++; break;
			case 98: c++; break;
			case 99: c++; break;
			case 100: c++; break;
			case 101: c++; break;
			case 102: c++; break;
			case 103: c++; break;
			case 104: c++; break;
			case 105: c++; break;
			case 106: c++; break;
			case 107: c++; break;
			case 108: c++; break;
			case 109: c++; break;
			case 110: c++; break;
			case 111: c++; break;
			case 112: c++; break;
			case 113: c++; break;
			case 114: c++; break;
			case 115: c++; break;
			case 116: c++; break;
			case 117: c++; break;
			case 118: c++; break;
			case 119: c++; break;
			default: c--; break;
		}
	}
	return c;
}


int swi50(int c)
{
	int i;
	for (i=0; i<50; i++) {
		switch (i) {
			case 0: c++; break;
			case 1: c++; break;
			case 2: c++; break;
			case 3: c++; break;
			case 4: c++; break;
			case 5: c++; break;
			case 6: c++; break;
			case 7: c++; break;
			case 8: c++; break;
			case 9: c++; break;
			case 10: c++; break;
			case 11: c++; break;
			case 12: c++; break;
			case 13: c++; break;
			case 14: c++; break;
			case 15: c++; break;
			case 16: c++; break;
			case 17: c++; break;
			case 18: c++; break;
			case 19: c++; break;
			case 20: c++; break;
			case 21: c++; break;
			case 22: c++; break;
			case 23: c++; break;
			case 24: c++; break;
			case 25: c++; break;
			case 26: c++; break;
			case 27: c++; break;
			case 28: c++; break;
			case 29: c++; break;
			case 30: c++; break;
			case 31: c++; break;
			case 32: c++; break;
			case 33: c++; break;
			case 34: c++; break;
			case 35: c++; break;
			case 36: c++; break;
			case 37: c++; break;
			case 38: c++; break;
			case 39: c++; break;
			case 40: c++; break;
			case 41: c++; break;
			case 42: c++; break;
			case 43: c++; break;
			case 44: c++; break;
			case 45: c++; break;
			case 46: c++; break;
			case 47: c++; break;
			case 48: c++; break;
			case 49: c++; break;
			case 50: c++; break;
			case 51: c++; break;
			case 52: c++; break;
			case 53: c++; break;
			case 54: c++; break;
			case 55: c++; break;
			case 56: c++; break;
			case 57: c++; break;
			case 58: c++; break;
			case 59: c++; break;
			default: c--; break;
		}
	}
	return c;
}


int swi10(int c)
{
	int i;
	for (i=0; i<10; i++) {
		switch (i) {
			case 0: c++; break;
			case 1: c++; break;
			case 2: c++; break;
			case 3: c++; break;
			case 4: c++; break;
			case 5: c++; break;
			case 6: c++; break;
			case 7: c++; break;
			case 8: c++; break;
			case 9: c++; break;
			default: c--; break;
		}
	}
	return c;
}

int main()
{
	volatile int cnt=0;

	cnt=swi10(cnt);
	cnt=swi50(cnt);
	cnt=swi120(cnt);

	/* printf("cnt: %d\n", cnt); */

	return cnt;

}

---

---
[cdfg swi120]

To solve this problem, we need to model the control flow graph (CFG) of a given C program snippet that uses a for loop with a switch statement inside. The goal is to create an accurate CFG using Graphviz's DOT language.

### Approach
The problem involves analyzing the control flow of a simple program that iterates from 0 to 119, incrementing a variable `c` within each iteration. The key steps to construct the CFG are as follows:

1. **Entry Node**: Represents the start of the program.
2. **Loop Condition Check**: A node representing the condition `i < 120`.
3. **Switch Statement**: Inside the loop, we have a switch statement that always results in incrementing `c`.
4. **Increment Operation**: After processing each case in the switch, `i` is incremented.
5. **Exit Node**: Represents the end of the program when the loop terminates.

Each node will be represented with appropriate shapes: circles for process nodes, diamonds for condition checks, and double circles for exit points. Edges between these nodes will represent the flow of control.

### Solution Code

```dot
digraph swi120 {
    rankdir=TB;
    
    1 [shape=circle, label="Entry"];
    2 [shape=diamond, label="i < 120?"];
    3 [shape=circle, label="c++", xlabel="C-Use: c\nP-Use: i"];
    4 [shape=circle, label="i++"];
    5 [shape=doublecircle, label="Return"];
    
    1 -> 2;
    2 -> 3 [label="True"];
    2 -> 5 [label="False"];
    3 -> 4;
    4 -> 2;
}
```

### Explanation
- **Node 1 (Entry)**: The starting point of the program.
- **Node 2 (Loop Condition Check)**: This node checks if `i` is less than 120. If true, it proceeds to the switch statement; otherwise, it exits the loop and returns.
- **Node 3 (Switch Statement)**: Represents the increment operation on `c`. It reads and writes `c` (C-Use) and uses `i` for control flow (P-Use).
- **Node 4 (Increment Operation)**: Increments `i` after each iteration, which is a C-Use operation.
- **Node 5 (Exit)**: The end of the program when the loop condition fails.

The edges between nodes represent the control flow:
- Entry flows into the loop condition check.
- The loop condition either continues to process the switch or exits directly.
- After processing each case in the switch, `i` is incremented and the loop condition is checked again.

This CFG accurately models the control flow of the given program, ensuring that each operation's dependencies and flows are correctly represented.
---

---
[analise infeasible_paths swi120]

```markdown
# Caminhos Inviáveis Identificados

1. **Caminho Inviável [swi120]**
   - **Trechos de Código**:
     - Linha correspondente ao nó Entry (assumindo que é o início da função swi120)
     - Nó 2: `if i < 120?`
     - Nó 5: Retorna após a condição ser falsa
   - **Descrição**: Nó 1 → Nó 2 → Nó 5
   - **Motivo**: Contradição lógica, pois 'i' é inicializado em 0, fazendo com que a primeira verificação sempre seja verdadeira. Portanto, o caminho para Nó 5 diretamente não será executado.
```
---

---
[cdfg swi50]

---

---
[analise infeasible_paths swi50]

---

---
[cdfg swi10]

---

---
[analise infeasible_paths swi10]

---

---
[cdfg main]

---

---
[analise infeasible_paths main]

---

---
**Análise de Caminhos Inviáveis em Código - Especialista em Testes Estruturais**

**Instruções de Entrada:**  
Forneça:  
1. O código-fonte a ser analisado  
2. Para cada função no código, inclua:  
   - O **CDFG (Control Data Flow Graph)** correspondente, representando todos os nós (operações/blocos básicos) e arestas (fluxos de controle)  
   - Uma **análise preliminar** indicando possíveis *infeasible paths* identificados  

---

**Processo de Análise (Executado Automaticamente):**  

**1. Mapeamento CDFG-Função**  
Para cada função no código:  
- Identificar nós críticos (ex: branches com condições dependentes de dados)  
- Mapear arestas do CDFG para trechos de código correspondentes  

**2. Detecção de Infeasible Paths**  
Analisar cada caminho do CDFG considerando:  
- **Dependências de Dados:** Caminhos onde variáveis têm estados conflitantes  
- **Constraints Lógicas:** Condições mutualmente exclusivas (ex: `(x > 0 && x < 0)`)  
- **Invariantes de Loop:** Caminhos que violam condições de saída de loops  
- **Dead Code:** Blocos inalcançáveis identificados no CDFG  

**3. Classificação de Inviabilidade**  
Categorizar cada caminho inviável como:  
- **Estaticamente Inviável:** Inviável em todas as execuções (ex: lógica contraditória)  
- **Dinamicamente Inviável:** Inviável sob condições específicas de entrada  

**4. Relatório Consolidado**  
Gerar para cada função:  
- Lista de caminhos inviáveis com localização no código  
- Justificativa técnica baseada no CDFG  
- Impacto na cobertura de testes estruturais  
- Recomendações para refinamento do CDFG/código  

---

**Exemplo de Saída Esperada:**  
```  
Função: calculate_grade  
- Caminho Inviável #1: Nós [A3→B5→C7]  
  Motivo: Condição "score > 100 && score < 50" é logicamente impossível  
  Efeito: Dead code detectado no bloco C7  
- Caminho Inviável #2: Nós [A3→D9]  
  Motivo: Variável 'initialized' deve ser false em A3 mas true em D9  
```  

**Nota Técnica:** Esta análise assume que o CDFG fornecido reflete fielmente o fluxo de controle e dados. Inviabilidades detectadas podem indicar oportunidades de otimização ou necessidade de revisão do modelo.
---
