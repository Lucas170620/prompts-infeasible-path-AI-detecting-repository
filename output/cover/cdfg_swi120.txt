
To solve this problem, we need to model the control flow graph (CFG) of a given C program snippet that uses a for loop with a switch statement inside. The goal is to create an accurate CFG using Graphviz's DOT language.

### Approach
The problem involves analyzing the control flow of a simple program that iterates from 0 to 119, incrementing a variable `c` within each iteration. The key steps to construct the CFG are as follows:

1. **Entry Node**: Represents the start of the program.
2. **Loop Condition Check**: A node representing the condition `i < 120`.
3. **Switch Statement**: Inside the loop, we have a switch statement that always results in incrementing `c`.
4. **Increment Operation**: After processing each case in the switch, `i` is incremented.
5. **Exit Node**: Represents the end of the program when the loop terminates.

Each node will be represented with appropriate shapes: circles for process nodes, diamonds for condition checks, and double circles for exit points. Edges between these nodes will represent the flow of control.

### Solution Code

```dot
digraph swi120 {
    rankdir=TB;
    
    1 [shape=circle, label="Entry"];
    2 [shape=diamond, label="i < 120?"];
    3 [shape=circle, label="c++", xlabel="C-Use: c\nP-Use: i"];
    4 [shape=circle, label="i++"];
    5 [shape=doublecircle, label="Return"];
    
    1 -> 2;
    2 -> 3 [label="True"];
    2 -> 5 [label="False"];
    3 -> 4;
    4 -> 2;
}
```

### Explanation
- **Node 1 (Entry)**: The starting point of the program.
- **Node 2 (Loop Condition Check)**: This node checks if `i` is less than 120. If true, it proceeds to the switch statement; otherwise, it exits the loop and returns.
- **Node 3 (Switch Statement)**: Represents the increment operation on `c`. It reads and writes `c` (C-Use) and uses `i` for control flow (P-Use).
- **Node 4 (Increment Operation)**: Increments `i` after each iteration, which is a C-Use operation.
- **Node 5 (Exit)**: The end of the program when the loop condition fails.

The edges between nodes represent the control flow:
- Entry flows into the loop condition check.
- The loop condition either continues to process the switch or exits directly.
- After processing each case in the switch, `i` is incremented and the loop condition is checked again.

This CFG accurately models the control flow of the given program, ensuring that each operation's dependencies and flows are correctly represented.