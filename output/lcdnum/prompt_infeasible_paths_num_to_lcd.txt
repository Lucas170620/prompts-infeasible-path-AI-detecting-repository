[code]
/* MDH WCET BENCHMARK SUITE. */

/* 2012/09/28, Jan Gustafsson <jan.gustafsson@mdh.se>
 * Changes:
 *  - The volatile variable n controls a loop, which is not correct. The loop will not terminate. Fixed.
 */

/***********************************************************************
 *  FILE: synthetic.c
 *
 *  PURPOSE: demonstrate effect of flow facts for straight loops
 *
 *  IDEA: reading from an in port mapped to a ten-item buffer,
 *        send first five characters to an LCD as numbers
 *
 ***********************************************************************/


unsigned char num_to_lcd(unsigned char a)
{
  /*   -0-            1            01
   *  1   2         2   4        02  04
   *   -3-    i.e.    8     i.e.   08
   *  4   5        16   32       10  20
   *   -6-           64            40
   *
   */
  switch(a)
    {
    case 0x00: return 0;
    case 0x01: return 0x24;
    case 0x02: return 1+4+8+16+64;
    case 0x03: return 1+4+8+32+64;
    case 0x04: return 2+4+8+32;
    case 0x05: return 1+4+8+16+64;
    case 0x06: return 1+2+8+16+32+64;
    case 0x07: return 1+4+32;
    case 0x08: return 0x7F;     /* light all */
    case 0x09: return 0x0F + 32 + 64;
    case 0x0A: return 0x0F + 16 + 32;
    case 0x0B: return 2+8+16+32+64;
    case 0x0C: return 1+2+16+64;
    case 0x0D: return 4+8+16+32+64;
    case 0x0E: return 1+2+8+16+64;
    case 0x0F: return 1+2+8+16;
    }
  return 0;
}

volatile unsigned char IN;
volatile unsigned char OUT;

int main(void)
{
  int           i;
  unsigned char a;
  /*volatile*/ int  n; /* JG */

  n = 10;
  for(i=0; i< n; i++)
    {
      a = IN;                   /* scan port */
      if(i<5)
        {
          a = a &0x0F;
          OUT = num_to_lcd(a);
        }
    }
  return 0;
}

---
[cdfg]

```dot
digraph num_to_lcd {
    rankdir=TB;
    
    1 [label="1", xlabel="C-Use: a\nDef: OUT"];
    2 [label="2", xlabel="Case 0x00"];
    3 [label="3", xlabel="Case 0x01"];
    4 [label="4", xlabel="Case 0x02"];
    5 [label="5", xlabel="Case 0x03"];
    6 [label="6", xlabel="Case 0x04"];
    7 [label="7", xlabel="Case 0x05"];
    8 [label="8", xlabel="Case 0x06"];
    9 [label="9", xlabel="Case 0x07"];
    10[label="10", xlabel="Case 0x08"];
    11[label="11", xlabel="Case 0x09"];
    12[label="12", xlabel="Case 0x0A"];
    13[label="13", xlabel="Case 0x0B"];
    14[label="14", xlabel="Case 0x0C"];
    15[label="15", xlabel="Case 0x0D"];
    16[label="16", xlabel="Case 0x0E"];
    17[label="17", xlabel="Case 0x0F"];
    18[label="18", shape=doublecircle];
    
    1 -> 2 [label="a == 0x00"];
    1 -> 3 [label="a == 0x01"];
    1 -> 4 [label="a == 0x02"];
    1 -> 5 [label="a == 0x03"];
    1 -> 6 [label="a == 0x04"];
    1 -> 7 [label="a == 0x05"];
    1 -> 8 [label="a == 0x06"];
    1 -> 9 [label="a == 0x07"];
    1 -> 10[label="a == 0x08"];
    1 -> 11[label="a == 0x09"];
    1 -> 12[label="a == 0x0A"];
    1 -> 13[label="a == 0x0B"];
    1 -> 14[label="a == 0x0C"];
    1 -> 15[label="a == 0x0D"];
    1 -> 16[label="a == 0x0E"];
    1 -> 17[label="a == 0x0F"];
    
    2 -> 18 [label="Return"];
    3 -> 18 [label="Return"];
    4 -> 18 [label="Return"];
    5 -> 18 [label="Return"];
    6 -> 18 [label="Return"];
    7 -> 18 [label="Return"];
    8 -> 18 [label="Return"];
    9 -> 18 [label="Return"];
    10-> 18 [label="Return"];
    11-> 18 [label="Return"];
    12-> 18 [label="Return"];
    13-> 18 [label="Return"];
    14-> 18 [label="Return"];
    15-> 18 [label="Return"];
    16-> 18 [label="Return"];
    17-> 18 [label="Return"];
}
```

<codigos - num_to_lcd>
Node 1:
unsigned char num_to_lcd(unsigned char a)
{
    /*   -0-            1            01
     *  1   2         2   4        02  04
     *   -3-    i.e.    8     i.e.   08
     *  4   5        16   32       10  20
     *   -6-           64            40
     *
     */
    switch(a)
      {
Node 2:
case 0x00: return 0;
Node 3:
case 0x01: return 0x24;
Node 4:
case 0x02: return 1+4+8+16+64;
Node 5:
case 0x03: return 1+4+8+32+64;
Node 6:
case 0x04: return 2+4+8+32;
Node 7:
case 0x05: return 1+4+8+16+64;
Node 8:
case 0x06: return 1+2+8+16+32+64;
Node 9:
case 0x07: return 1+4+32;
Node 10:
case 0x08: return 0x7F;     /* light all */
Node 11:
case 0x09: return 0x0F + 32 + 64;
Node 12:
case 0x0A: return 0x0F + 16 + 32;
Node 13:
case 0x0B: return 2+8+16+32+64;
Node 14:
case 0x0C: return 1+2+16+64;
Node 15:
case 0x0D: return 4+8+16+32+64;
Node 16:
case 0x0E: return 1+2+8+16+64;
Node 17:
case 0x0F: return 1+2+8+16;
}
Node 18:
return 0;
</codigos>
---
 Você é um especialista em engenharia de software com expertise em teste estrutural, CDFG e Graphviz. Sua tarefa é analisar um código e seu CDFG para identificar caminhos inviáveis (*infeasible paths*). Siga **rigorosamente** os passos abaixo.

---

#### **1. Contexto Teórico (Resumo)**  
- **CDFG**: Combina CFG (fluxo de controle) e DFG (fluxo de dados).  
- **Caminhos Inviáveis**: Sequências de nós/arestas inexequíveis devido a:  
  - Contradições lógicas (ex: `x > 10` e `x < 5` no mesmo caminho).  
  - Dependências de dados (ex: variável não inicializada).  
  - Conflitos em condições sequenciais ou invariantes de programa.  

---

#### **2. Exemplo de Análise**  
**Função de Exemplo:**  
```python
def example(x):
    if x > 10:     # Nó A
        y = 5      # Nó B
    else:
        y = 0      # Nó C
    if y < 0:      # Nó D
        return -1  # Nó E
    return y       # Nó F
```

**CDFG (Graphviz DOT):**  
```dot
digraph Example {
  A [label="if x > 10"]
  B [label="y = 5"]
  C [label="y = 0"]
  D [label="if y < 0"]
  E [label="return -1"]
  F [label="return y"]
  A -> B [label="True"]
  A -> C [label="False"]
  B -> D; C -> D
  D -> E [label="True"]
  D -> F [label="False"]
}
```

**Análise:**  
1. **Passo 1:** Rastrear caminhos no CDFG (ex: A→B→D→E).  
2. **Passo 2:** Verificar contradições:  
   - Caminho `A→B→D→E`:  
     - Em `B`, `y = 5`.  
     - Em `D`, a condição `y < 0` é **falsa** porque `y = 5`.  
     - Conclusão: O caminho para `E` é inviável.  
3. **Saída Formatada:**  
   ```markdown
   1. **Caminho Inviável [example]**  
      - **Trechos de Código**:  
        - Linha 2: `if x > 10`  
        - Linha 3: `y = 5`  
        - Linha 6: `if y < 0`  
        - Linha 7: `return -1`  
      - **Descrição**: Nó A → Nó B → Nó D → Nó E  
      - **Motivo**: Contradição lógica: `y = 5` torna a condição `y < 0` falsa.  
   ```

---

#### **3. Tarefa Principal**  
Analise o código e CDFG fornecidos abaixo:

**Função:**  
```<num_to_lcd>```

**CDFG (Graphviz DOT):**  
```<INSIRA AQUI O CDFG>```

---

Execute **sequencialmente** estes passos:

**Passo 1: Mapeamento Código-CDFG**  
- Relacione cada nó/aresta do CDFG com trechos do código.  
- Exemplo: "Nó A corresponde à linha 5: `if x > 0`".

**Passo 2: Identificação de Caminhos Potenciais**  
- Liste todos os caminhos possíveis no CDFG (ex: A→B→D, A→C→D).  
- Use a estrutura do CDFG para evitar omissões.

**Passo 3. Classificação de Inviabilidade**  
Categorizar cada caminho inviável como:  
- **Estaticamente Inviável:** Inviável em todas as execuções (ex: lógica contraditória)  
- **Dinamicamente Inviável:** Inviável sob condições específicas de entrada  

**Passo 4: Análise de Viabilidade por Critério**  
Para cada caminho:  
1. **Dados**: Variáveis estão inicializadas? Valores são consistentes?  
2. **Lógica**: Condições subsequentes se contradizem?  
3. **Contexto**: Há invariantes (ex: `x ≥ 0`) que bloqueiam o caminho?  
4. **Loop**: Condições de entrada/saída de loops são satisfeitas?

**Passo 5: Consolidação**  
- Filtre caminhos que violam **pelo menos um critério** como inviáveis.  
- Descreva cada um com:  
  - Trechos de código relevantes.  
  - Sequência de nós.  
  - Motivo detalhado (ex: "`x = 5` no nó B contradiz `x != 5` no nó D").

---

#### **5. Formato de Saída Exigido**  
- Se houver caminhos inviáveis:  
  ```markdown
  # Caminhos Inviáveis Identificados

  [Número]. **Caminho Inviável [Nome da Função]**  
    - **Trechos de Código**:  
      - Linha [X]: `[código]`  
      - Linha [Y]: `[código]`  
    - **Descrição**: [Sequência de nós, ex: A → B → C]  
    - **Motivo**: [Explicação técnica com base nos critérios]  
  ```  
- Caso contrário:  
  `"Nenhum caminho inviável foi identificado."`