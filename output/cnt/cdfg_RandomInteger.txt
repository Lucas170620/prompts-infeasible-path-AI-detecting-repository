
To model the function `update_seed` using Control Flow Dataflow Graph (CDFG), we break down each operation into nodes connected sequentially without branches.

1. **Nodes:**
   - Node 1: Use of Seed for multiplication.
   - Node 2: Multiply by 133.
   - Node 3: Add 81 to the result.
   - Node 4: Compute modulo 8095 and assign back to Seed.
   - Node 5: Return the updated Seed.

2. **Edges:**
   - Each node is connected in a straight line (Node 1 → Node 2 → Node 3 → Node 4 → Node 5).

This graph captures each step's dependencies and transformations, showing how the value of Seed evolves through arithmetic operations before being returned.

```code
/* C code for update_seed function */
void update_seed() {
    int temp = seed * 133;
    temp += 81;
    seed = temp % 8095;
}

/* Corresponding CDFG nodes and edges */
Node 1: Use of Seed (C-Use)
Edge → Node 2

Node 2: Multiply by 133 (C-Use from Node 1)
Edge → Node 3

Node 3: Add 81 (C-Use from Node 2)
Edge → Node 4

Node 4: Modulo 8095 and assign to Seed (Defining Seed)
Edge → Node 5

Node 5: Return statement (C-Use of updated Seed)
```