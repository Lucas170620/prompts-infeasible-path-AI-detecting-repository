[code]
/* $Id: crc.c,v 1.2 2005/04/04 11:34:58 csg Exp $ */

/*************************************************************************/
/*                                                                       */
/*   SNU-RT Benchmark Suite for Worst Case Timing Analysis               */
/*   =====================================================               */
/*                              Collected and Modified by S.-S. Lim      */
/*                                           sslim@archi.snu.ac.kr       */
/*                                         Real-Time Research Group      */
/*                                        Seoul National University      */
/*                                                                       */
/*                                                                       */
/*        < Features > - restrictions for our experimental environment   */
/*                                                                       */
/*          1. Completely structured.                                    */
/*               - There are no unconditional jumps.                     */
/*               - There are no exit from loop bodies.                   */
/*                 (There are no 'break' or 'return' in loop bodies)     */
/*          2. No 'switch' statements.                                   */
/*          3. No 'do..while' statements.                                */
/*          4. Expressions are restricted.                               */
/*               - There are no multiple expressions joined by 'or',     */
/*                'and' operations.                                      */
/*          5. No library calls.                                         */
/*               - All the functions needed are implemented in the       */
/*                 source file.                                          */
/*                                                                       */
/*                                                                       */
/*************************************************************************/
/*                                                                       */
/*  FILE: crc.c                                                          */
/*  SOURCE : Numerical Recipes in C - The Second Edition                 */
/*                                                                       */
/*  DESCRIPTION :                                                        */
/*                                                                       */
/*     A demonstration for CRC (Cyclic Redundancy Check) operation.      */
/*     The CRC is manipulated as two functions, icrc1 and icrc.          */
/*     icrc1 is for one character and icrc uses icrc1 for a string.      */
/*     The input string is stored in array lin[].                        */
/*     icrc is called two times, one for X-Modem string CRC and the      */
/*     other for X-Modem packet CRC.                                     */
/*                                                                       */
/*  REMARK :                                                             */
/*                                                                       */
/*  EXECUTION TIME :                                                     */
/*                                                                       */
/*                                                                       */
/*************************************************************************/


typedef unsigned char uchar;
#define LOBYTE(x) ((uchar)((x) & 0xFF))
#define HIBYTE(x) ((uchar)((x) >> 8))

unsigned char lin[256] = "asdffeagewaHAFEFaeDsFEawFdsFaefaeerdjgp";

unsigned short icrc1(unsigned short crc, unsigned char onech)
{
	int i;
	unsigned short ans=(crc^onech << 8);

	for (i=0;i<8;i++) {
		if (ans & 0x8000)
			ans = (ans <<= 1) ^ 4129;
		else
			ans <<= 1;
	}
	return ans;
}

unsigned short icrc(unsigned short crc, unsigned long len,
		    short jinit, int jrev)
{
  unsigned short icrc1(unsigned short crc, unsigned char onech);
  static unsigned short icrctb[256],init=0;
  static uchar rchr[256];
  unsigned short tmp1, tmp2, j,cword=crc;
  static uchar it[16]={0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15};

  if (!init) {
    init=1;
    for (j=0;j<=255;j++) {
      icrctb[j]=icrc1(j << 8,(uchar)0);
      rchr[j]=(uchar)(it[j & 0xF] << 4 | it[j >> 4]);
    }
  }
  if (jinit >= 0) cword=((uchar) jinit) | (((uchar) jinit) << 8);
  else if (jrev < 0)
    cword=rchr[HIBYTE(cword)] | rchr[LOBYTE(cword)] << 8;
#ifdef DEBUG
  printf("len = %d\n", len);
#endif
  for (j=1;j<=len;j++) {
    if (jrev < 0) {
      tmp1 = rchr[lin[j]]^ HIBYTE(cword);
    }
    else {
      tmp1 = lin[j]^ HIBYTE(cword);
    }
    cword = icrctb[tmp1] ^ LOBYTE(cword) << 8;
  }
  if (jrev >= 0) {
    tmp2 = cword;
  }
  else {
    tmp2 = rchr[HIBYTE(cword)] | rchr[LOBYTE(cword)] << 8;
  }
  return (tmp2 );
}


int main(void)
{

  unsigned short i1,i2;
  unsigned long n;

  n=40;
  lin[n+1]=0;
  i1=icrc(0,n,(short)0,1);
  lin[n+1]=HIBYTE(i1);
  lin[n+2]=LOBYTE(i1);
  i2=icrc(i1,n+2,(short)0,1);
  return 0;
}

---
Você é um especialista em análise estática de código e teste estrutural. Sua tarefa é analisar código fornecido e gerar um **CDFG (Control and Data Flow Graph)** preciso em formato Graphviz DOT para uma função icrc.

### Especificações Técnicas:

**1. Linguagem Graphviz DOT:**
- Use digrafos direcionados: `digraph NomeFuncao { ... }`
- Personalize nós com: `NóID [label="Texto" shape="forma" xlabel="info dados"]`
- Formas principais: box (processamento), diamond (decisão), doublecircle (fim)
- Rotule arestas com condições: `A -> B [label="condição"]`
- Use `rankdir=TB` para layout vertical

**2. Construção do CDFG Híbrido:**
Integre estas informações em cada nó:
- **Fluxo de Controle:** sequência de execução básica
- **Fluxo de Dados:** def (definições) e use (usos) de variáveis
- **Tipos de Uso:** C-Use (computacional) e P-Use (predicativo)

**3. Estrutura de Representação:**
- Nós de processo: operações sequenciais
- Nós de decisão: condições if/while/for
- Arestas verdadeiro/falso para bifurcações
- Loops: nó de condição com retorno ao corpo
- Use circulo para representar os nós
- Um circulo duplo para representar o nó final.

### Processamento Obrigatório:

**Para a função especificada:**
1. Identifique todos os blocos básicos
2. Mapeie definições (def) e usos (c-use/p-use) de variáveis
3. Construa o grafo integrando controle e dados
4. Numere nós sequencialmente
5. Gere lista de correspondência código-nós

### Saída Exigida:

**Parte 1 - Código Graphviz:**
```dot
digraph NomeFuncao {
    // Configurações e nós
}
```

**Parte 2 - Mapeamento Código-Nós (em tags):**
<codigos - NomeFuncao>
Node [ID]:
[Trecho código relevante]
---
[Próximo node...]
</codigos>

### Exemplo de Referência:

**Código:**
```java
public class Order {
    public void applyDiscount(Customer customer, Product product) {
        boolean isPremium = customer.isPremiumMember();
        boolean isEligibleForDiscount = product.getPrice() > 100.00;
        boolean isOnClearance = product.isOnClearance();
        
        if (isPremium && isEligibleForDiscount) {
            System.out.println("Desconto Premium aplicado.");
        }

        if (isOnClearance) {
            System.out.println("Item em liquidação.");
            if (isPremium && isEligibleForDiscount) {
                System.out.println("Super Desconto para Premium em Liquidação!");
            }
        }
    }
}
```

**Saída Esperada:**
```dot
digraph order {
    rankdir=TB;
    node [shape=circle];
    
    1 [label="1", xlabel="Def: isPremium, isEligibleForDiscount, isOnClearance\nC-Use: customer, product"];
    2 [label="2", xlabel="P-Use: isPremium, isEligibleForDiscount"];
    3 [label="3"];
    4 [label="4", xlabel="P-Use: isOnClearance"];
    5 [label="5"];
    6 [label="6", xlabel="P-Use: isPremium, isEligibleForDiscount"];
    7 [label="7"];    
    8 [label="8"];
    
    1 -> 2 ;
    2 -> 3 [label="True\n(isPremium && isEligibleForDiscount)"];
    2 -> 4 [label="False"];
    3 -> 4 ;
    4 -> 5 [label="True\n(isOnClearance)"];
    4 -> 8 [label="False"];
    5 -> 6 ;
    6 -> 7 [label="True"];
    6 -> 8 [label="False"];
    7 -> 8 ;    
    8 [shape=doublecircle];
}
```

<codigos - exemplo>
Node 1:
int y = x * 2;
---
Node 2:
if (y > 10)
---
Node 3:
System.out.println("Maior")
---
Node 4:
return
</codigos>

**Agora, gere o CDFG completo para o código e função fornecidos. Mantenha precisão técnica e complete ambas as partes da saída.**