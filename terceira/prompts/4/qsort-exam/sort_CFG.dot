digraph sort_CFG {
    node [shape=box, style=rounded, fontname="Helvetica"];
    edge [fontname="Helvetica"];

    N1 [label="1: Initialization\n(i, ir=n, j, k, l=1, jstack=0, flag=0, a, temp)"];
    N2 [label="2: for (;;)"];
    N3 [label="3: if (ir-l < M)"];
    N4 [label="4: Insertion sort loop (j from l+1 to ir)"];
    N5 [label="5: a = arr[j]; i = j-1;"];
    N6 [label="6: Inner loop (i >= l)"];
    N7 [label="7: if (arr[i] <= a) break"];
    N8 [label="8: arr[i+1] = arr[i]; i--"];
    N9 [label="9: arr[i+1] = a"];
    N10 [label="10: if (jstack == 0) break"];
    N11 [label="11: ir = istack[jstack--]; l = istack[jstack--]"];
    N12 [label="12: k = (l+ir)>>1; SWAP(arr[k], arr[l+1])"];
    N13 [label="13: if (arr[l] > arr[ir]) SWAP(arr[l], arr[ir])"];
    N14 [label="14: if (arr[l+1] > arr[ir]) SWAP(arr[l+1], arr[ir])"];
    N15 [label="15: if (arr[l] > arr[l+1]) SWAP(arr[l], arr[l+1])"];
    N16 [label="16: i = l+1; j = ir; a = arr[l+1]"];
    N17 [label="17: for (;;)"];
    N18 [label="18: i++; while (arr[i] < a) i++"];
    N19 [label="19: j--; while (arr[j] > a) j--"];
    N20 [label="20: if (j < i) break"];
    N21 [label="21: SWAP(arr[i], arr[j])"];
    N22 [label="22: arr[l+1] = arr[j]; arr[j] = a"];
    N23 [label="23: jstack += 2"];
    N24 [label="24: if (ir-i+1 >= j-l)"];
    N25 [label="25: istack[jstack] = ir; istack[jstack-1] = i; ir = j-1"];
    N26 [label="26: istack[jstack] = j-1; istack[jstack-1] = l; l = i"];
    N27 [label="27: End"];

    N1 -> N2;
    N2 -> N3;
    N3 -> N4 [label="true"];
    N3 -> N12 [label="false"];
    N4 -> N5;
    N5 -> N6;
    N6 -> N7;
    N7 -> N9 [label="true"];
    N7 -> N8 [label="false"];
    N8 -> N6;
    N9 -> N4 [label="j++"];
    N4 -> N10 [label="j>ir"];
    N10 -> N27 [label="true"];
    N10 -> N11 [label="false"];
    N11 -> N2;
    N12 -> N13;
    N13 -> N14;
    N14 -> N15;
    N15 -> N16;
    N16 -> N17;
    N17 -> N18;
    N18 -> N19;
    N19 -> N20;
    N20 -> N22 [label="true"];
    N20 -> N21 [label="false"];
    N21 -> N17;
    N22 -> N23;
    N23 -> N24;
    N24 -> N25 [label="true"];
    N24 -> N26 [label="false"];
    N25 -> N2;
    N26 -> N2;
}