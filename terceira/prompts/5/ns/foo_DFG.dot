digraph foo_DFG {
    node [shape=ellipse, style=filled, fillcolor=lightblue];
    i_init [label="i=0"];
    j_init [label="j=0"];
    k_init [label="k=0"];
    l_init [label="l=0"];
    x_in [label="x"];

    node [shape=box, style="", fillcolor=""];
    add_i [label="i++"];
    add_j [label="j++"];
    add_k [label="k++"];
    add_l [label="l++"];
    cmp_i [label="i<5"];
    cmp_j [label="j<5"];
    cmp_k [label="k<5"];
    cmp_l [label="l<5"];
    array_index [label="keys[i][j][k][l]"];
    condition [label="keys[i][j][k][l] == x"];
    return_val [label="answer[i][j][k][l] + keys[i][j][k][l]"];

    node [shape=ellipse, style=filled, fillcolor=lightgreen];
    return_stmt [label="return"];

    i_init -> cmp_i;
    i_init -> array_index;
    i_init -> return_val;
    add_i -> cmp_i;
    cmp_i -> add_i;
    j_init -> cmp_j;
    j_init -> array_index;
    j_init -> return_val;
    add_j -> cmp_j;
    cmp_j -> add_j;
    k_init -> cmp_k;
    k_init -> array_index;
    k_init -> return_val;
    add_k -> cmp_k;
    cmp_k -> add_k;
    l_init -> cmp_l;
    l_init -> array_index;
    l_init -> return_val;
    add_l -> cmp_l;
    cmp_l -> add_l;
    x_in -> condition;
    array_index -> condition;
    array_index -> return_val;
    condition -> return_stmt;
    return_val -> return_stmt;
}